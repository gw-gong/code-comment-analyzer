// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.2
// source: ccanalyzer.proto

package ccanalyzer_client

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	CcAnalyzer_AddUser_FullMethodName = "/CcAnalyzer/AddUser"
	CcAnalyzer_GetUser_FullMethodName = "/CcAnalyzer/GetUser"
)

// CcAnalyzerClient is the client API for CcAnalyzer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// 定义User rpc服务
type CcAnalyzerClient interface {
	// 定义rpc服务的方法
	AddUser(ctx context.Context, in *UserRequest, opts ...grpc.CallOption) (*UserResponse, error)
	GetUser(ctx context.Context, in *GetUserRequest, opts ...grpc.CallOption) (*GetUserResponse, error)
}

type ccAnalyzerClient struct {
	cc grpc.ClientConnInterface
}

func NewCcAnalyzerClient(cc grpc.ClientConnInterface) CcAnalyzerClient {
	return &ccAnalyzerClient{cc}
}

func (c *ccAnalyzerClient) AddUser(ctx context.Context, in *UserRequest, opts ...grpc.CallOption) (*UserResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UserResponse)
	err := c.cc.Invoke(ctx, CcAnalyzer_AddUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ccAnalyzerClient) GetUser(ctx context.Context, in *GetUserRequest, opts ...grpc.CallOption) (*GetUserResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetUserResponse)
	err := c.cc.Invoke(ctx, CcAnalyzer_GetUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CcAnalyzerServer is the server API for CcAnalyzer service.
// All implementations must embed UnimplementedCcAnalyzerServer
// for forward compatibility.
//
// 定义User rpc服务
type CcAnalyzerServer interface {
	// 定义rpc服务的方法
	AddUser(context.Context, *UserRequest) (*UserResponse, error)
	GetUser(context.Context, *GetUserRequest) (*GetUserResponse, error)
	mustEmbedUnimplementedCcAnalyzerServer()
}

// UnimplementedCcAnalyzerServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedCcAnalyzerServer struct{}

func (UnimplementedCcAnalyzerServer) AddUser(context.Context, *UserRequest) (*UserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddUser not implemented")
}
func (UnimplementedCcAnalyzerServer) GetUser(context.Context, *GetUserRequest) (*GetUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUser not implemented")
}
func (UnimplementedCcAnalyzerServer) mustEmbedUnimplementedCcAnalyzerServer() {}
func (UnimplementedCcAnalyzerServer) testEmbeddedByValue()                    {}

// UnsafeCcAnalyzerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CcAnalyzerServer will
// result in compilation errors.
type UnsafeCcAnalyzerServer interface {
	mustEmbedUnimplementedCcAnalyzerServer()
}

func RegisterCcAnalyzerServer(s grpc.ServiceRegistrar, srv CcAnalyzerServer) {
	// If the following call pancis, it indicates UnimplementedCcAnalyzerServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&CcAnalyzer_ServiceDesc, srv)
}

func _CcAnalyzer_AddUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CcAnalyzerServer).AddUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CcAnalyzer_AddUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CcAnalyzerServer).AddUser(ctx, req.(*UserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CcAnalyzer_GetUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CcAnalyzerServer).GetUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CcAnalyzer_GetUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CcAnalyzerServer).GetUser(ctx, req.(*GetUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CcAnalyzer_ServiceDesc is the grpc.ServiceDesc for CcAnalyzer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CcAnalyzer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "CcAnalyzer",
	HandlerType: (*CcAnalyzerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddUser",
			Handler:    _CcAnalyzer_AddUser_Handler,
		},
		{
			MethodName: "GetUser",
			Handler:    _CcAnalyzer_GetUser_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ccanalyzer.proto",
}
