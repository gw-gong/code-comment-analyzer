// Code generated by SQLBoiler 4.18.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// UserUser is an object representing the database table.
type UserUser struct {
	UID            uint64      `boil:"uid" json:"uid" toml:"uid" yaml:"uid"`
	Nickname       string      `boil:"nickname" json:"nickname" toml:"nickname" yaml:"nickname"`
	Email          string      `boil:"email" json:"email" toml:"email" yaml:"email"`
	Password       string      `boil:"password" json:"password" toml:"password" yaml:"password"`
	ProfilePicture null.String `boil:"profile_picture" json:"profile_picture,omitempty" toml:"profile_picture" yaml:"profile_picture,omitempty"`
	DateJoined     time.Time   `boil:"date_joined" json:"date_joined" toml:"date_joined" yaml:"date_joined"`
	IsActive       bool        `boil:"is_active" json:"is_active" toml:"is_active" yaml:"is_active"`

	R *userUserR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L userUserL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var UserUserColumns = struct {
	UID            string
	Nickname       string
	Email          string
	Password       string
	ProfilePicture string
	DateJoined     string
	IsActive       string
}{
	UID:            "uid",
	Nickname:       "nickname",
	Email:          "email",
	Password:       "password",
	ProfilePicture: "profile_picture",
	DateJoined:     "date_joined",
	IsActive:       "is_active",
}

var UserUserTableColumns = struct {
	UID            string
	Nickname       string
	Email          string
	Password       string
	ProfilePicture string
	DateJoined     string
	IsActive       string
}{
	UID:            "user_user.uid",
	Nickname:       "user_user.nickname",
	Email:          "user_user.email",
	Password:       "user_user.password",
	ProfilePicture: "user_user.profile_picture",
	DateJoined:     "user_user.date_joined",
	IsActive:       "user_user.is_active",
}

// Generated where

type whereHelpernull_String struct{ field string }

func (w whereHelpernull_String) EQ(x null.String) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_String) NEQ(x null.String) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_String) LT(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_String) LTE(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_String) GT(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_String) GTE(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}
func (w whereHelpernull_String) LIKE(x null.String) qm.QueryMod {
	return qm.Where(w.field+" LIKE ?", x)
}
func (w whereHelpernull_String) NLIKE(x null.String) qm.QueryMod {
	return qm.Where(w.field+" NOT LIKE ?", x)
}
func (w whereHelpernull_String) IN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelpernull_String) NIN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

func (w whereHelpernull_String) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_String) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

type whereHelperbool struct{ field string }

func (w whereHelperbool) EQ(x bool) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperbool) NEQ(x bool) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperbool) LT(x bool) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperbool) LTE(x bool) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperbool) GT(x bool) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperbool) GTE(x bool) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }

var UserUserWhere = struct {
	UID            whereHelperuint64
	Nickname       whereHelperstring
	Email          whereHelperstring
	Password       whereHelperstring
	ProfilePicture whereHelpernull_String
	DateJoined     whereHelpertime_Time
	IsActive       whereHelperbool
}{
	UID:            whereHelperuint64{field: "`user_user`.`uid`"},
	Nickname:       whereHelperstring{field: "`user_user`.`nickname`"},
	Email:          whereHelperstring{field: "`user_user`.`email`"},
	Password:       whereHelperstring{field: "`user_user`.`password`"},
	ProfilePicture: whereHelpernull_String{field: "`user_user`.`profile_picture`"},
	DateJoined:     whereHelpertime_Time{field: "`user_user`.`date_joined`"},
	IsActive:       whereHelperbool{field: "`user_user`.`is_active`"},
}

// UserUserRels is where relationship names are stored.
var UserUserRels = struct {
	UserUserOperatingrecords string
}{
	UserUserOperatingrecords: "UserUserOperatingrecords",
}

// userUserR is where relationships are stored.
type userUserR struct {
	UserUserOperatingrecords UserOperatingrecordSlice `boil:"UserUserOperatingrecords" json:"UserUserOperatingrecords" toml:"UserUserOperatingrecords" yaml:"UserUserOperatingrecords"`
}

// NewStruct creates a new relationship struct
func (*userUserR) NewStruct() *userUserR {
	return &userUserR{}
}

func (r *userUserR) GetUserUserOperatingrecords() UserOperatingrecordSlice {
	if r == nil {
		return nil
	}
	return r.UserUserOperatingrecords
}

// userUserL is where Load methods for each relationship are stored.
type userUserL struct{}

var (
	userUserAllColumns            = []string{"uid", "nickname", "email", "password", "profile_picture", "date_joined", "is_active"}
	userUserColumnsWithoutDefault = []string{"nickname", "email", "password", "profile_picture", "date_joined", "is_active"}
	userUserColumnsWithDefault    = []string{"uid"}
	userUserPrimaryKeyColumns     = []string{"uid"}
	userUserGeneratedColumns      = []string{}
)

type (
	// UserUserSlice is an alias for a slice of pointers to UserUser.
	// This should almost always be used instead of []UserUser.
	UserUserSlice []*UserUser
	// UserUserHook is the signature for custom UserUser hook methods
	UserUserHook func(boil.Executor, *UserUser) error

	userUserQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	userUserType                 = reflect.TypeOf(&UserUser{})
	userUserMapping              = queries.MakeStructMapping(userUserType)
	userUserPrimaryKeyMapping, _ = queries.BindMapping(userUserType, userUserMapping, userUserPrimaryKeyColumns)
	userUserInsertCacheMut       sync.RWMutex
	userUserInsertCache          = make(map[string]insertCache)
	userUserUpdateCacheMut       sync.RWMutex
	userUserUpdateCache          = make(map[string]updateCache)
	userUserUpsertCacheMut       sync.RWMutex
	userUserUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var userUserAfterSelectMu sync.Mutex
var userUserAfterSelectHooks []UserUserHook

var userUserBeforeInsertMu sync.Mutex
var userUserBeforeInsertHooks []UserUserHook
var userUserAfterInsertMu sync.Mutex
var userUserAfterInsertHooks []UserUserHook

var userUserBeforeUpdateMu sync.Mutex
var userUserBeforeUpdateHooks []UserUserHook
var userUserAfterUpdateMu sync.Mutex
var userUserAfterUpdateHooks []UserUserHook

var userUserBeforeDeleteMu sync.Mutex
var userUserBeforeDeleteHooks []UserUserHook
var userUserAfterDeleteMu sync.Mutex
var userUserAfterDeleteHooks []UserUserHook

var userUserBeforeUpsertMu sync.Mutex
var userUserBeforeUpsertHooks []UserUserHook
var userUserAfterUpsertMu sync.Mutex
var userUserAfterUpsertHooks []UserUserHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *UserUser) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range userUserAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *UserUser) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range userUserBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *UserUser) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range userUserAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *UserUser) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range userUserBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *UserUser) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range userUserAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *UserUser) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range userUserBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *UserUser) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range userUserAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *UserUser) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range userUserBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *UserUser) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range userUserAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddUserUserHook registers your hook function for all future operations.
func AddUserUserHook(hookPoint boil.HookPoint, userUserHook UserUserHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		userUserAfterSelectMu.Lock()
		userUserAfterSelectHooks = append(userUserAfterSelectHooks, userUserHook)
		userUserAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		userUserBeforeInsertMu.Lock()
		userUserBeforeInsertHooks = append(userUserBeforeInsertHooks, userUserHook)
		userUserBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		userUserAfterInsertMu.Lock()
		userUserAfterInsertHooks = append(userUserAfterInsertHooks, userUserHook)
		userUserAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		userUserBeforeUpdateMu.Lock()
		userUserBeforeUpdateHooks = append(userUserBeforeUpdateHooks, userUserHook)
		userUserBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		userUserAfterUpdateMu.Lock()
		userUserAfterUpdateHooks = append(userUserAfterUpdateHooks, userUserHook)
		userUserAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		userUserBeforeDeleteMu.Lock()
		userUserBeforeDeleteHooks = append(userUserBeforeDeleteHooks, userUserHook)
		userUserBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		userUserAfterDeleteMu.Lock()
		userUserAfterDeleteHooks = append(userUserAfterDeleteHooks, userUserHook)
		userUserAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		userUserBeforeUpsertMu.Lock()
		userUserBeforeUpsertHooks = append(userUserBeforeUpsertHooks, userUserHook)
		userUserBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		userUserAfterUpsertMu.Lock()
		userUserAfterUpsertHooks = append(userUserAfterUpsertHooks, userUserHook)
		userUserAfterUpsertMu.Unlock()
	}
}

// OneG returns a single userUser record from the query using the global executor.
func (q userUserQuery) OneG() (*UserUser, error) {
	return q.One(boil.GetDB())
}

// OneGP returns a single userUser record from the query using the global executor, and panics on error.
func (q userUserQuery) OneGP() *UserUser {
	o, err := q.One(boil.GetDB())
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// OneP returns a single userUser record from the query, and panics on error.
func (q userUserQuery) OneP(exec boil.Executor) *UserUser {
	o, err := q.One(exec)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// One returns a single userUser record from the query.
func (q userUserQuery) One(exec boil.Executor) (*UserUser, error) {
	o := &UserUser{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for user_user")
	}

	if err := o.doAfterSelectHooks(exec); err != nil {
		return o, err
	}

	return o, nil
}

// AllG returns all UserUser records from the query using the global executor.
func (q userUserQuery) AllG() (UserUserSlice, error) {
	return q.All(boil.GetDB())
}

// AllGP returns all UserUser records from the query using the global executor, and panics on error.
func (q userUserQuery) AllGP() UserUserSlice {
	o, err := q.All(boil.GetDB())
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// AllP returns all UserUser records from the query, and panics on error.
func (q userUserQuery) AllP(exec boil.Executor) UserUserSlice {
	o, err := q.All(exec)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// All returns all UserUser records from the query.
func (q userUserQuery) All(exec boil.Executor) (UserUserSlice, error) {
	var o []*UserUser

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to UserUser slice")
	}

	if len(userUserAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountG returns the count of all UserUser records in the query using the global executor
func (q userUserQuery) CountG() (int64, error) {
	return q.Count(boil.GetDB())
}

// CountGP returns the count of all UserUser records in the query using the global executor, and panics on error.
func (q userUserQuery) CountGP() int64 {
	c, err := q.Count(boil.GetDB())
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return c
}

// CountP returns the count of all UserUser records in the query, and panics on error.
func (q userUserQuery) CountP(exec boil.Executor) int64 {
	c, err := q.Count(exec)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return c
}

// Count returns the count of all UserUser records in the query.
func (q userUserQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count user_user rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table using the global executor.
func (q userUserQuery) ExistsG() (bool, error) {
	return q.Exists(boil.GetDB())
}

// ExistsGP checks if the row exists in the table using the global executor, and panics on error.
func (q userUserQuery) ExistsGP() bool {
	e, err := q.Exists(boil.GetDB())
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// ExistsP checks if the row exists in the table, and panics on error.
func (q userUserQuery) ExistsP(exec boil.Executor) bool {
	e, err := q.Exists(exec)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// Exists checks if the row exists in the table.
func (q userUserQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if user_user exists")
	}

	return count > 0, nil
}

// UserUserOperatingrecords retrieves all the user_operatingrecord's UserOperatingrecords with an executor via user_id column.
func (o *UserUser) UserUserOperatingrecords(mods ...qm.QueryMod) userOperatingrecordQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`user_operatingrecord`.`user_id`=?", o.UID),
	)

	return UserOperatingrecords(queryMods...)
}

// LoadUserUserOperatingrecords allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (userUserL) LoadUserUserOperatingrecords(e boil.Executor, singular bool, maybeUserUser interface{}, mods queries.Applicator) error {
	var slice []*UserUser
	var object *UserUser

	if singular {
		var ok bool
		object, ok = maybeUserUser.(*UserUser)
		if !ok {
			object = new(UserUser)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeUserUser)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeUserUser))
			}
		}
	} else {
		s, ok := maybeUserUser.(*[]*UserUser)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeUserUser)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeUserUser))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &userUserR{}
		}
		args[object.UID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &userUserR{}
			}
			args[obj.UID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`user_operatingrecord`),
		qm.WhereIn(`user_operatingrecord.user_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load user_operatingrecord")
	}

	var resultSlice []*UserOperatingrecord
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice user_operatingrecord")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on user_operatingrecord")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for user_operatingrecord")
	}

	if len(userOperatingrecordAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.UserUserOperatingrecords = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &userOperatingrecordR{}
			}
			foreign.R.User = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.UID == foreign.UserID {
				local.R.UserUserOperatingrecords = append(local.R.UserUserOperatingrecords, foreign)
				if foreign.R == nil {
					foreign.R = &userOperatingrecordR{}
				}
				foreign.R.User = local
				break
			}
		}
	}

	return nil
}

// AddUserUserOperatingrecordsG adds the given related objects to the existing relationships
// of the user_user, optionally inserting them as new records.
// Appends related to o.R.UserUserOperatingrecords.
// Sets related.R.User appropriately.
// Uses the global database handle.
func (o *UserUser) AddUserUserOperatingrecordsG(insert bool, related ...*UserOperatingrecord) error {
	return o.AddUserUserOperatingrecords(boil.GetDB(), insert, related...)
}

// AddUserUserOperatingrecordsP adds the given related objects to the existing relationships
// of the user_user, optionally inserting them as new records.
// Appends related to o.R.UserUserOperatingrecords.
// Sets related.R.User appropriately.
// Panics on error.
func (o *UserUser) AddUserUserOperatingrecordsP(exec boil.Executor, insert bool, related ...*UserOperatingrecord) {
	if err := o.AddUserUserOperatingrecords(exec, insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddUserUserOperatingrecordsGP adds the given related objects to the existing relationships
// of the user_user, optionally inserting them as new records.
// Appends related to o.R.UserUserOperatingrecords.
// Sets related.R.User appropriately.
// Uses the global database handle and panics on error.
func (o *UserUser) AddUserUserOperatingrecordsGP(insert bool, related ...*UserOperatingrecord) {
	if err := o.AddUserUserOperatingrecords(boil.GetDB(), insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddUserUserOperatingrecords adds the given related objects to the existing relationships
// of the user_user, optionally inserting them as new records.
// Appends related to o.R.UserUserOperatingrecords.
// Sets related.R.User appropriately.
func (o *UserUser) AddUserUserOperatingrecords(exec boil.Executor, insert bool, related ...*UserOperatingrecord) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.UserID = o.UID
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `user_operatingrecord` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"user_id"}),
				strmangle.WhereClause("`", "`", 0, userOperatingrecordPrimaryKeyColumns),
			)
			values := []interface{}{o.UID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.UserID = o.UID
		}
	}

	if o.R == nil {
		o.R = &userUserR{
			UserUserOperatingrecords: related,
		}
	} else {
		o.R.UserUserOperatingrecords = append(o.R.UserUserOperatingrecords, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &userOperatingrecordR{
				User: o,
			}
		} else {
			rel.R.User = o
		}
	}
	return nil
}

// UserUsers retrieves all the records using an executor.
func UserUsers(mods ...qm.QueryMod) userUserQuery {
	mods = append(mods, qm.From("`user_user`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`user_user`.*"})
	}

	return userUserQuery{q}
}

// FindUserUserG retrieves a single record by ID.
func FindUserUserG(uID uint64, selectCols ...string) (*UserUser, error) {
	return FindUserUser(boil.GetDB(), uID, selectCols...)
}

// FindUserUserP retrieves a single record by ID with an executor, and panics on error.
func FindUserUserP(exec boil.Executor, uID uint64, selectCols ...string) *UserUser {
	retobj, err := FindUserUser(exec, uID, selectCols...)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return retobj
}

// FindUserUserGP retrieves a single record by ID, and panics on error.
func FindUserUserGP(uID uint64, selectCols ...string) *UserUser {
	retobj, err := FindUserUser(boil.GetDB(), uID, selectCols...)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return retobj
}

// FindUserUser retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindUserUser(exec boil.Executor, uID uint64, selectCols ...string) (*UserUser, error) {
	userUserObj := &UserUser{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `user_user` where `uid`=?", sel,
	)

	q := queries.Raw(query, uID)

	err := q.Bind(nil, exec, userUserObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from user_user")
	}

	if err = userUserObj.doAfterSelectHooks(exec); err != nil {
		return userUserObj, err
	}

	return userUserObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *UserUser) InsertG(columns boil.Columns) error {
	return o.Insert(boil.GetDB(), columns)
}

// InsertP a single record using an executor, and panics on error. See Insert
// for whitelist behavior description.
func (o *UserUser) InsertP(exec boil.Executor, columns boil.Columns) {
	if err := o.Insert(exec, columns); err != nil {
		panic(boil.WrapErr(err))
	}
}

// InsertGP a single record, and panics on error. See Insert for whitelist
// behavior description.
func (o *UserUser) InsertGP(columns boil.Columns) {
	if err := o.Insert(boil.GetDB(), columns); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *UserUser) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no user_user provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(userUserColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	userUserInsertCacheMut.RLock()
	cache, cached := userUserInsertCache[key]
	userUserInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			userUserAllColumns,
			userUserColumnsWithDefault,
			userUserColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(userUserType, userUserMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(userUserType, userUserMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `user_user` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `user_user` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `user_user` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, userUserPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	result, err := exec.Exec(cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into user_user")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.UID = uint64(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == userUserMapping["uid"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.UID,
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, identifierCols...)
	}
	err = exec.QueryRow(cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for user_user")
	}

CacheNoHooks:
	if !cached {
		userUserInsertCacheMut.Lock()
		userUserInsertCache[key] = cache
		userUserInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// UpdateG a single UserUser record using the global executor.
// See Update for more documentation.
func (o *UserUser) UpdateG(columns boil.Columns) (int64, error) {
	return o.Update(boil.GetDB(), columns)
}

// UpdateP uses an executor to update the UserUser, and panics on error.
// See Update for more documentation.
func (o *UserUser) UpdateP(exec boil.Executor, columns boil.Columns) int64 {
	rowsAff, err := o.Update(exec, columns)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return rowsAff
}

// UpdateGP a single UserUser record using the global executor. Panics on error.
// See Update for more documentation.
func (o *UserUser) UpdateGP(columns boil.Columns) int64 {
	rowsAff, err := o.Update(boil.GetDB(), columns)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return rowsAff
}

// Update uses an executor to update the UserUser.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *UserUser) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	userUserUpdateCacheMut.RLock()
	cache, cached := userUserUpdateCache[key]
	userUserUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			userUserAllColumns,
			userUserPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update user_user, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `user_user` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, userUserPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(userUserType, userUserMapping, append(wl, userUserPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update user_user row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for user_user")
	}

	if !cached {
		userUserUpdateCacheMut.Lock()
		userUserUpdateCache[key] = cache
		userUserUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(exec)
}

// UpdateAllP updates all rows with matching column names, and panics on error.
func (q userUserQuery) UpdateAllP(exec boil.Executor, cols M) int64 {
	rowsAff, err := q.UpdateAll(exec, cols)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return rowsAff
}

// UpdateAllG updates all rows with the specified column values.
func (q userUserQuery) UpdateAllG(cols M) (int64, error) {
	return q.UpdateAll(boil.GetDB(), cols)
}

// UpdateAllGP updates all rows with the specified column values, and panics on error.
func (q userUserQuery) UpdateAllGP(cols M) int64 {
	rowsAff, err := q.UpdateAll(boil.GetDB(), cols)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return rowsAff
}

// UpdateAll updates all rows with the specified column values.
func (q userUserQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for user_user")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for user_user")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o UserUserSlice) UpdateAllG(cols M) (int64, error) {
	return o.UpdateAll(boil.GetDB(), cols)
}

// UpdateAllGP updates all rows with the specified column values, and panics on error.
func (o UserUserSlice) UpdateAllGP(cols M) int64 {
	rowsAff, err := o.UpdateAll(boil.GetDB(), cols)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return rowsAff
}

// UpdateAllP updates all rows with the specified column values, and panics on error.
func (o UserUserSlice) UpdateAllP(exec boil.Executor, cols M) int64 {
	rowsAff, err := o.UpdateAll(exec, cols)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return rowsAff
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o UserUserSlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), userUserPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `user_user` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, userUserPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in userUser slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all userUser")
	}
	return rowsAff, nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *UserUser) UpsertG(updateColumns, insertColumns boil.Columns) error {
	return o.Upsert(boil.GetDB(), updateColumns, insertColumns)
}

// UpsertGP attempts an insert, and does an update or ignore on conflict. Panics on error.
func (o *UserUser) UpsertGP(updateColumns, insertColumns boil.Columns) {
	if err := o.Upsert(boil.GetDB(), updateColumns, insertColumns); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpsertP attempts an insert using an executor, and does an update or ignore on conflict.
// UpsertP panics on error.
func (o *UserUser) UpsertP(exec boil.Executor, updateColumns, insertColumns boil.Columns) {
	if err := o.Upsert(exec, updateColumns, insertColumns); err != nil {
		panic(boil.WrapErr(err))
	}
}

var mySQLUserUserUniqueColumns = []string{
	"uid",
	"email",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *UserUser) Upsert(exec boil.Executor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no user_user provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(userUserColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLUserUserUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	userUserUpsertCacheMut.RLock()
	cache, cached := userUserUpsertCache[key]
	userUserUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			userUserAllColumns,
			userUserColumnsWithDefault,
			userUserColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			userUserAllColumns,
			userUserPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert user_user, could not build update column list")
		}

		ret := strmangle.SetComplement(userUserAllColumns, strmangle.SetIntersect(insert, update))

		cache.query = buildUpsertQueryMySQL(dialect, "`user_user`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `user_user` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(userUserType, userUserMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(userUserType, userUserMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	result, err := exec.Exec(cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for user_user")
	}

	var lastID int64
	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.UID = uint64(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == userUserMapping["uid"] {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(userUserType, userUserMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for user_user")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, nzUniqueCols...)
	}
	err = exec.QueryRow(cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for user_user")
	}

CacheNoHooks:
	if !cached {
		userUserUpsertCacheMut.Lock()
		userUserUpsertCache[key] = cache
		userUserUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// DeleteG deletes a single UserUser record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *UserUser) DeleteG() (int64, error) {
	return o.Delete(boil.GetDB())
}

// DeleteP deletes a single UserUser record with an executor.
// DeleteP will match against the primary key column to find the record to delete.
// Panics on error.
func (o *UserUser) DeleteP(exec boil.Executor) int64 {
	rowsAff, err := o.Delete(exec)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return rowsAff
}

// DeleteGP deletes a single UserUser record.
// DeleteGP will match against the primary key column to find the record to delete.
// Panics on error.
func (o *UserUser) DeleteGP() int64 {
	rowsAff, err := o.Delete(boil.GetDB())
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return rowsAff
}

// Delete deletes a single UserUser record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *UserUser) Delete(exec boil.Executor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no UserUser provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), userUserPrimaryKeyMapping)
	sql := "DELETE FROM `user_user` WHERE `uid`=?"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from user_user")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for user_user")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

func (q userUserQuery) DeleteAllG() (int64, error) {
	return q.DeleteAll(boil.GetDB())
}

// DeleteAllP deletes all rows, and panics on error.
func (q userUserQuery) DeleteAllP(exec boil.Executor) int64 {
	rowsAff, err := q.DeleteAll(exec)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return rowsAff
}

// DeleteAllGP deletes all rows, and panics on error.
func (q userUserQuery) DeleteAllGP() int64 {
	rowsAff, err := q.DeleteAll(boil.GetDB())
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return rowsAff
}

// DeleteAll deletes all matching rows.
func (q userUserQuery) DeleteAll(exec boil.Executor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no userUserQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from user_user")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for user_user")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o UserUserSlice) DeleteAllG() (int64, error) {
	return o.DeleteAll(boil.GetDB())
}

// DeleteAllP deletes all rows in the slice, using an executor, and panics on error.
func (o UserUserSlice) DeleteAllP(exec boil.Executor) int64 {
	rowsAff, err := o.DeleteAll(exec)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return rowsAff
}

// DeleteAllGP deletes all rows in the slice, and panics on error.
func (o UserUserSlice) DeleteAllGP() int64 {
	rowsAff, err := o.DeleteAll(boil.GetDB())
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return rowsAff
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o UserUserSlice) DeleteAll(exec boil.Executor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(userUserBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), userUserPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `user_user` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, userUserPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from userUser slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for user_user")
	}

	if len(userUserAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *UserUser) ReloadG() error {
	if o == nil {
		return errors.New("models: no UserUser provided for reload")
	}

	return o.Reload(boil.GetDB())
}

// ReloadP refetches the object from the database with an executor. Panics on error.
func (o *UserUser) ReloadP(exec boil.Executor) {
	if err := o.Reload(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadGP refetches the object from the database and panics on error.
func (o *UserUser) ReloadGP() {
	if err := o.Reload(boil.GetDB()); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *UserUser) Reload(exec boil.Executor) error {
	ret, err := FindUserUser(exec, o.UID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *UserUserSlice) ReloadAllG() error {
	if o == nil {
		return errors.New("models: empty UserUserSlice provided for reload all")
	}

	return o.ReloadAll(boil.GetDB())
}

// ReloadAllP refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
// Panics on error.
func (o *UserUserSlice) ReloadAllP(exec boil.Executor) {
	if err := o.ReloadAll(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadAllGP refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
// Panics on error.
func (o *UserUserSlice) ReloadAllGP() {
	if err := o.ReloadAll(boil.GetDB()); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *UserUserSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := UserUserSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), userUserPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `user_user`.* FROM `user_user` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, userUserPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in UserUserSlice")
	}

	*o = slice

	return nil
}

// UserUserExistsG checks if the UserUser row exists.
func UserUserExistsG(uID uint64) (bool, error) {
	return UserUserExists(boil.GetDB(), uID)
}

// UserUserExistsP checks if the UserUser row exists. Panics on error.
func UserUserExistsP(exec boil.Executor, uID uint64) bool {
	e, err := UserUserExists(exec, uID)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// UserUserExistsGP checks if the UserUser row exists. Panics on error.
func UserUserExistsGP(uID uint64) bool {
	e, err := UserUserExists(boil.GetDB(), uID)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// UserUserExists checks if the UserUser row exists.
func UserUserExists(exec boil.Executor, uID uint64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `user_user` where `uid`=? limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, uID)
	}
	row := exec.QueryRow(sql, uID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if user_user exists")
	}

	return exists, nil
}

// Exists checks if the UserUser row exists.
func (o *UserUser) Exists(exec boil.Executor) (bool, error) {
	return UserUserExists(exec, o.UID)
}
