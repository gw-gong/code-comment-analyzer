// Code generated by SQLBoiler 4.18.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// UserProjectrecord is an object representing the database table.
type UserProjectrecord struct {
	ID                int64  `boil:"id" json:"id" toml:"id" yaml:"id"`
	ProjectURL        string `boil:"project_url" json:"project_url" toml:"project_url" yaml:"project_url"`
	OperatingRecordID int64  `boil:"operating_record_id" json:"operating_record_id" toml:"operating_record_id" yaml:"operating_record_id"`

	R *userProjectrecordR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L userProjectrecordL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var UserProjectrecordColumns = struct {
	ID                string
	ProjectURL        string
	OperatingRecordID string
}{
	ID:                "id",
	ProjectURL:        "project_url",
	OperatingRecordID: "operating_record_id",
}

var UserProjectrecordTableColumns = struct {
	ID                string
	ProjectURL        string
	OperatingRecordID string
}{
	ID:                "user_projectrecord.id",
	ProjectURL:        "user_projectrecord.project_url",
	OperatingRecordID: "user_projectrecord.operating_record_id",
}

// Generated where

var UserProjectrecordWhere = struct {
	ID                whereHelperint64
	ProjectURL        whereHelperstring
	OperatingRecordID whereHelperint64
}{
	ID:                whereHelperint64{field: "`user_projectrecord`.`id`"},
	ProjectURL:        whereHelperstring{field: "`user_projectrecord`.`project_url`"},
	OperatingRecordID: whereHelperint64{field: "`user_projectrecord`.`operating_record_id`"},
}

// UserProjectrecordRels is where relationship names are stored.
var UserProjectrecordRels = struct {
	OperatingRecord string
}{
	OperatingRecord: "OperatingRecord",
}

// userProjectrecordR is where relationships are stored.
type userProjectrecordR struct {
	OperatingRecord *UserOperatingrecord `boil:"OperatingRecord" json:"OperatingRecord" toml:"OperatingRecord" yaml:"OperatingRecord"`
}

// NewStruct creates a new relationship struct
func (*userProjectrecordR) NewStruct() *userProjectrecordR {
	return &userProjectrecordR{}
}

func (r *userProjectrecordR) GetOperatingRecord() *UserOperatingrecord {
	if r == nil {
		return nil
	}
	return r.OperatingRecord
}

// userProjectrecordL is where Load methods for each relationship are stored.
type userProjectrecordL struct{}

var (
	userProjectrecordAllColumns            = []string{"id", "project_url", "operating_record_id"}
	userProjectrecordColumnsWithoutDefault = []string{"project_url", "operating_record_id"}
	userProjectrecordColumnsWithDefault    = []string{"id"}
	userProjectrecordPrimaryKeyColumns     = []string{"id"}
	userProjectrecordGeneratedColumns      = []string{}
)

type (
	// UserProjectrecordSlice is an alias for a slice of pointers to UserProjectrecord.
	// This should almost always be used instead of []UserProjectrecord.
	UserProjectrecordSlice []*UserProjectrecord
	// UserProjectrecordHook is the signature for custom UserProjectrecord hook methods
	UserProjectrecordHook func(boil.Executor, *UserProjectrecord) error

	userProjectrecordQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	userProjectrecordType                 = reflect.TypeOf(&UserProjectrecord{})
	userProjectrecordMapping              = queries.MakeStructMapping(userProjectrecordType)
	userProjectrecordPrimaryKeyMapping, _ = queries.BindMapping(userProjectrecordType, userProjectrecordMapping, userProjectrecordPrimaryKeyColumns)
	userProjectrecordInsertCacheMut       sync.RWMutex
	userProjectrecordInsertCache          = make(map[string]insertCache)
	userProjectrecordUpdateCacheMut       sync.RWMutex
	userProjectrecordUpdateCache          = make(map[string]updateCache)
	userProjectrecordUpsertCacheMut       sync.RWMutex
	userProjectrecordUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var userProjectrecordAfterSelectMu sync.Mutex
var userProjectrecordAfterSelectHooks []UserProjectrecordHook

var userProjectrecordBeforeInsertMu sync.Mutex
var userProjectrecordBeforeInsertHooks []UserProjectrecordHook
var userProjectrecordAfterInsertMu sync.Mutex
var userProjectrecordAfterInsertHooks []UserProjectrecordHook

var userProjectrecordBeforeUpdateMu sync.Mutex
var userProjectrecordBeforeUpdateHooks []UserProjectrecordHook
var userProjectrecordAfterUpdateMu sync.Mutex
var userProjectrecordAfterUpdateHooks []UserProjectrecordHook

var userProjectrecordBeforeDeleteMu sync.Mutex
var userProjectrecordBeforeDeleteHooks []UserProjectrecordHook
var userProjectrecordAfterDeleteMu sync.Mutex
var userProjectrecordAfterDeleteHooks []UserProjectrecordHook

var userProjectrecordBeforeUpsertMu sync.Mutex
var userProjectrecordBeforeUpsertHooks []UserProjectrecordHook
var userProjectrecordAfterUpsertMu sync.Mutex
var userProjectrecordAfterUpsertHooks []UserProjectrecordHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *UserProjectrecord) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range userProjectrecordAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *UserProjectrecord) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range userProjectrecordBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *UserProjectrecord) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range userProjectrecordAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *UserProjectrecord) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range userProjectrecordBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *UserProjectrecord) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range userProjectrecordAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *UserProjectrecord) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range userProjectrecordBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *UserProjectrecord) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range userProjectrecordAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *UserProjectrecord) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range userProjectrecordBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *UserProjectrecord) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range userProjectrecordAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddUserProjectrecordHook registers your hook function for all future operations.
func AddUserProjectrecordHook(hookPoint boil.HookPoint, userProjectrecordHook UserProjectrecordHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		userProjectrecordAfterSelectMu.Lock()
		userProjectrecordAfterSelectHooks = append(userProjectrecordAfterSelectHooks, userProjectrecordHook)
		userProjectrecordAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		userProjectrecordBeforeInsertMu.Lock()
		userProjectrecordBeforeInsertHooks = append(userProjectrecordBeforeInsertHooks, userProjectrecordHook)
		userProjectrecordBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		userProjectrecordAfterInsertMu.Lock()
		userProjectrecordAfterInsertHooks = append(userProjectrecordAfterInsertHooks, userProjectrecordHook)
		userProjectrecordAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		userProjectrecordBeforeUpdateMu.Lock()
		userProjectrecordBeforeUpdateHooks = append(userProjectrecordBeforeUpdateHooks, userProjectrecordHook)
		userProjectrecordBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		userProjectrecordAfterUpdateMu.Lock()
		userProjectrecordAfterUpdateHooks = append(userProjectrecordAfterUpdateHooks, userProjectrecordHook)
		userProjectrecordAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		userProjectrecordBeforeDeleteMu.Lock()
		userProjectrecordBeforeDeleteHooks = append(userProjectrecordBeforeDeleteHooks, userProjectrecordHook)
		userProjectrecordBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		userProjectrecordAfterDeleteMu.Lock()
		userProjectrecordAfterDeleteHooks = append(userProjectrecordAfterDeleteHooks, userProjectrecordHook)
		userProjectrecordAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		userProjectrecordBeforeUpsertMu.Lock()
		userProjectrecordBeforeUpsertHooks = append(userProjectrecordBeforeUpsertHooks, userProjectrecordHook)
		userProjectrecordBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		userProjectrecordAfterUpsertMu.Lock()
		userProjectrecordAfterUpsertHooks = append(userProjectrecordAfterUpsertHooks, userProjectrecordHook)
		userProjectrecordAfterUpsertMu.Unlock()
	}
}

// OneG returns a single userProjectrecord record from the query using the global executor.
func (q userProjectrecordQuery) OneG() (*UserProjectrecord, error) {
	return q.One(boil.GetDB())
}

// OneGP returns a single userProjectrecord record from the query using the global executor, and panics on error.
func (q userProjectrecordQuery) OneGP() *UserProjectrecord {
	o, err := q.One(boil.GetDB())
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// OneP returns a single userProjectrecord record from the query, and panics on error.
func (q userProjectrecordQuery) OneP(exec boil.Executor) *UserProjectrecord {
	o, err := q.One(exec)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// One returns a single userProjectrecord record from the query.
func (q userProjectrecordQuery) One(exec boil.Executor) (*UserProjectrecord, error) {
	o := &UserProjectrecord{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for user_projectrecord")
	}

	if err := o.doAfterSelectHooks(exec); err != nil {
		return o, err
	}

	return o, nil
}

// AllG returns all UserProjectrecord records from the query using the global executor.
func (q userProjectrecordQuery) AllG() (UserProjectrecordSlice, error) {
	return q.All(boil.GetDB())
}

// AllGP returns all UserProjectrecord records from the query using the global executor, and panics on error.
func (q userProjectrecordQuery) AllGP() UserProjectrecordSlice {
	o, err := q.All(boil.GetDB())
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// AllP returns all UserProjectrecord records from the query, and panics on error.
func (q userProjectrecordQuery) AllP(exec boil.Executor) UserProjectrecordSlice {
	o, err := q.All(exec)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// All returns all UserProjectrecord records from the query.
func (q userProjectrecordQuery) All(exec boil.Executor) (UserProjectrecordSlice, error) {
	var o []*UserProjectrecord

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to UserProjectrecord slice")
	}

	if len(userProjectrecordAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountG returns the count of all UserProjectrecord records in the query using the global executor
func (q userProjectrecordQuery) CountG() (int64, error) {
	return q.Count(boil.GetDB())
}

// CountGP returns the count of all UserProjectrecord records in the query using the global executor, and panics on error.
func (q userProjectrecordQuery) CountGP() int64 {
	c, err := q.Count(boil.GetDB())
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return c
}

// CountP returns the count of all UserProjectrecord records in the query, and panics on error.
func (q userProjectrecordQuery) CountP(exec boil.Executor) int64 {
	c, err := q.Count(exec)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return c
}

// Count returns the count of all UserProjectrecord records in the query.
func (q userProjectrecordQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count user_projectrecord rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table using the global executor.
func (q userProjectrecordQuery) ExistsG() (bool, error) {
	return q.Exists(boil.GetDB())
}

// ExistsGP checks if the row exists in the table using the global executor, and panics on error.
func (q userProjectrecordQuery) ExistsGP() bool {
	e, err := q.Exists(boil.GetDB())
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// ExistsP checks if the row exists in the table, and panics on error.
func (q userProjectrecordQuery) ExistsP(exec boil.Executor) bool {
	e, err := q.Exists(exec)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// Exists checks if the row exists in the table.
func (q userProjectrecordQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if user_projectrecord exists")
	}

	return count > 0, nil
}

// OperatingRecord pointed to by the foreign key.
func (o *UserProjectrecord) OperatingRecord(mods ...qm.QueryMod) userOperatingrecordQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`id` = ?", o.OperatingRecordID),
	}

	queryMods = append(queryMods, mods...)

	return UserOperatingrecords(queryMods...)
}

// LoadOperatingRecord allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (userProjectrecordL) LoadOperatingRecord(e boil.Executor, singular bool, maybeUserProjectrecord interface{}, mods queries.Applicator) error {
	var slice []*UserProjectrecord
	var object *UserProjectrecord

	if singular {
		var ok bool
		object, ok = maybeUserProjectrecord.(*UserProjectrecord)
		if !ok {
			object = new(UserProjectrecord)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeUserProjectrecord)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeUserProjectrecord))
			}
		}
	} else {
		s, ok := maybeUserProjectrecord.(*[]*UserProjectrecord)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeUserProjectrecord)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeUserProjectrecord))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &userProjectrecordR{}
		}
		args[object.OperatingRecordID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &userProjectrecordR{}
			}

			args[obj.OperatingRecordID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`user_operatingrecord`),
		qm.WhereIn(`user_operatingrecord.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load UserOperatingrecord")
	}

	var resultSlice []*UserOperatingrecord
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice UserOperatingrecord")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for user_operatingrecord")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for user_operatingrecord")
	}

	if len(userOperatingrecordAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.OperatingRecord = foreign
		if foreign.R == nil {
			foreign.R = &userOperatingrecordR{}
		}
		foreign.R.OperatingRecordUserProjectrecord = object
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.OperatingRecordID == foreign.ID {
				local.R.OperatingRecord = foreign
				if foreign.R == nil {
					foreign.R = &userOperatingrecordR{}
				}
				foreign.R.OperatingRecordUserProjectrecord = local
				break
			}
		}
	}

	return nil
}

// SetOperatingRecordG of the userProjectrecord to the related item.
// Sets o.R.OperatingRecord to related.
// Adds o to related.R.OperatingRecordUserProjectrecord.
// Uses the global database handle.
func (o *UserProjectrecord) SetOperatingRecordG(insert bool, related *UserOperatingrecord) error {
	return o.SetOperatingRecord(boil.GetDB(), insert, related)
}

// SetOperatingRecordP of the userProjectrecord to the related item.
// Sets o.R.OperatingRecord to related.
// Adds o to related.R.OperatingRecordUserProjectrecord.
// Panics on error.
func (o *UserProjectrecord) SetOperatingRecordP(exec boil.Executor, insert bool, related *UserOperatingrecord) {
	if err := o.SetOperatingRecord(exec, insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetOperatingRecordGP of the userProjectrecord to the related item.
// Sets o.R.OperatingRecord to related.
// Adds o to related.R.OperatingRecordUserProjectrecord.
// Uses the global database handle and panics on error.
func (o *UserProjectrecord) SetOperatingRecordGP(insert bool, related *UserOperatingrecord) {
	if err := o.SetOperatingRecord(boil.GetDB(), insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetOperatingRecord of the userProjectrecord to the related item.
// Sets o.R.OperatingRecord to related.
// Adds o to related.R.OperatingRecordUserProjectrecord.
func (o *UserProjectrecord) SetOperatingRecord(exec boil.Executor, insert bool, related *UserOperatingrecord) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `user_projectrecord` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"operating_record_id"}),
		strmangle.WhereClause("`", "`", 0, userProjectrecordPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.OperatingRecordID = related.ID
	if o.R == nil {
		o.R = &userProjectrecordR{
			OperatingRecord: related,
		}
	} else {
		o.R.OperatingRecord = related
	}

	if related.R == nil {
		related.R = &userOperatingrecordR{
			OperatingRecordUserProjectrecord: o,
		}
	} else {
		related.R.OperatingRecordUserProjectrecord = o
	}

	return nil
}

// UserProjectrecords retrieves all the records using an executor.
func UserProjectrecords(mods ...qm.QueryMod) userProjectrecordQuery {
	mods = append(mods, qm.From("`user_projectrecord`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`user_projectrecord`.*"})
	}

	return userProjectrecordQuery{q}
}

// FindUserProjectrecordG retrieves a single record by ID.
func FindUserProjectrecordG(iD int64, selectCols ...string) (*UserProjectrecord, error) {
	return FindUserProjectrecord(boil.GetDB(), iD, selectCols...)
}

// FindUserProjectrecordP retrieves a single record by ID with an executor, and panics on error.
func FindUserProjectrecordP(exec boil.Executor, iD int64, selectCols ...string) *UserProjectrecord {
	retobj, err := FindUserProjectrecord(exec, iD, selectCols...)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return retobj
}

// FindUserProjectrecordGP retrieves a single record by ID, and panics on error.
func FindUserProjectrecordGP(iD int64, selectCols ...string) *UserProjectrecord {
	retobj, err := FindUserProjectrecord(boil.GetDB(), iD, selectCols...)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return retobj
}

// FindUserProjectrecord retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindUserProjectrecord(exec boil.Executor, iD int64, selectCols ...string) (*UserProjectrecord, error) {
	userProjectrecordObj := &UserProjectrecord{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `user_projectrecord` where `id`=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(nil, exec, userProjectrecordObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from user_projectrecord")
	}

	if err = userProjectrecordObj.doAfterSelectHooks(exec); err != nil {
		return userProjectrecordObj, err
	}

	return userProjectrecordObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *UserProjectrecord) InsertG(columns boil.Columns) error {
	return o.Insert(boil.GetDB(), columns)
}

// InsertP a single record using an executor, and panics on error. See Insert
// for whitelist behavior description.
func (o *UserProjectrecord) InsertP(exec boil.Executor, columns boil.Columns) {
	if err := o.Insert(exec, columns); err != nil {
		panic(boil.WrapErr(err))
	}
}

// InsertGP a single record, and panics on error. See Insert for whitelist
// behavior description.
func (o *UserProjectrecord) InsertGP(columns boil.Columns) {
	if err := o.Insert(boil.GetDB(), columns); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *UserProjectrecord) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no user_projectrecord provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(userProjectrecordColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	userProjectrecordInsertCacheMut.RLock()
	cache, cached := userProjectrecordInsertCache[key]
	userProjectrecordInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			userProjectrecordAllColumns,
			userProjectrecordColumnsWithDefault,
			userProjectrecordColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(userProjectrecordType, userProjectrecordMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(userProjectrecordType, userProjectrecordMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `user_projectrecord` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `user_projectrecord` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `user_projectrecord` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, userProjectrecordPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	result, err := exec.Exec(cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into user_projectrecord")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = int64(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == userProjectrecordMapping["id"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, identifierCols...)
	}
	err = exec.QueryRow(cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for user_projectrecord")
	}

CacheNoHooks:
	if !cached {
		userProjectrecordInsertCacheMut.Lock()
		userProjectrecordInsertCache[key] = cache
		userProjectrecordInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// UpdateG a single UserProjectrecord record using the global executor.
// See Update for more documentation.
func (o *UserProjectrecord) UpdateG(columns boil.Columns) (int64, error) {
	return o.Update(boil.GetDB(), columns)
}

// UpdateP uses an executor to update the UserProjectrecord, and panics on error.
// See Update for more documentation.
func (o *UserProjectrecord) UpdateP(exec boil.Executor, columns boil.Columns) int64 {
	rowsAff, err := o.Update(exec, columns)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return rowsAff
}

// UpdateGP a single UserProjectrecord record using the global executor. Panics on error.
// See Update for more documentation.
func (o *UserProjectrecord) UpdateGP(columns boil.Columns) int64 {
	rowsAff, err := o.Update(boil.GetDB(), columns)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return rowsAff
}

// Update uses an executor to update the UserProjectrecord.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *UserProjectrecord) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	userProjectrecordUpdateCacheMut.RLock()
	cache, cached := userProjectrecordUpdateCache[key]
	userProjectrecordUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			userProjectrecordAllColumns,
			userProjectrecordPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update user_projectrecord, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `user_projectrecord` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, userProjectrecordPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(userProjectrecordType, userProjectrecordMapping, append(wl, userProjectrecordPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update user_projectrecord row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for user_projectrecord")
	}

	if !cached {
		userProjectrecordUpdateCacheMut.Lock()
		userProjectrecordUpdateCache[key] = cache
		userProjectrecordUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(exec)
}

// UpdateAllP updates all rows with matching column names, and panics on error.
func (q userProjectrecordQuery) UpdateAllP(exec boil.Executor, cols M) int64 {
	rowsAff, err := q.UpdateAll(exec, cols)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return rowsAff
}

// UpdateAllG updates all rows with the specified column values.
func (q userProjectrecordQuery) UpdateAllG(cols M) (int64, error) {
	return q.UpdateAll(boil.GetDB(), cols)
}

// UpdateAllGP updates all rows with the specified column values, and panics on error.
func (q userProjectrecordQuery) UpdateAllGP(cols M) int64 {
	rowsAff, err := q.UpdateAll(boil.GetDB(), cols)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return rowsAff
}

// UpdateAll updates all rows with the specified column values.
func (q userProjectrecordQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for user_projectrecord")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for user_projectrecord")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o UserProjectrecordSlice) UpdateAllG(cols M) (int64, error) {
	return o.UpdateAll(boil.GetDB(), cols)
}

// UpdateAllGP updates all rows with the specified column values, and panics on error.
func (o UserProjectrecordSlice) UpdateAllGP(cols M) int64 {
	rowsAff, err := o.UpdateAll(boil.GetDB(), cols)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return rowsAff
}

// UpdateAllP updates all rows with the specified column values, and panics on error.
func (o UserProjectrecordSlice) UpdateAllP(exec boil.Executor, cols M) int64 {
	rowsAff, err := o.UpdateAll(exec, cols)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return rowsAff
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o UserProjectrecordSlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), userProjectrecordPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `user_projectrecord` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, userProjectrecordPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in userProjectrecord slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all userProjectrecord")
	}
	return rowsAff, nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *UserProjectrecord) UpsertG(updateColumns, insertColumns boil.Columns) error {
	return o.Upsert(boil.GetDB(), updateColumns, insertColumns)
}

// UpsertGP attempts an insert, and does an update or ignore on conflict. Panics on error.
func (o *UserProjectrecord) UpsertGP(updateColumns, insertColumns boil.Columns) {
	if err := o.Upsert(boil.GetDB(), updateColumns, insertColumns); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpsertP attempts an insert using an executor, and does an update or ignore on conflict.
// UpsertP panics on error.
func (o *UserProjectrecord) UpsertP(exec boil.Executor, updateColumns, insertColumns boil.Columns) {
	if err := o.Upsert(exec, updateColumns, insertColumns); err != nil {
		panic(boil.WrapErr(err))
	}
}

var mySQLUserProjectrecordUniqueColumns = []string{
	"id",
	"operating_record_id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *UserProjectrecord) Upsert(exec boil.Executor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no user_projectrecord provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(userProjectrecordColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLUserProjectrecordUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	userProjectrecordUpsertCacheMut.RLock()
	cache, cached := userProjectrecordUpsertCache[key]
	userProjectrecordUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			userProjectrecordAllColumns,
			userProjectrecordColumnsWithDefault,
			userProjectrecordColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			userProjectrecordAllColumns,
			userProjectrecordPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert user_projectrecord, could not build update column list")
		}

		ret := strmangle.SetComplement(userProjectrecordAllColumns, strmangle.SetIntersect(insert, update))

		cache.query = buildUpsertQueryMySQL(dialect, "`user_projectrecord`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `user_projectrecord` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(userProjectrecordType, userProjectrecordMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(userProjectrecordType, userProjectrecordMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	result, err := exec.Exec(cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for user_projectrecord")
	}

	var lastID int64
	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = int64(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == userProjectrecordMapping["id"] {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(userProjectrecordType, userProjectrecordMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for user_projectrecord")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, nzUniqueCols...)
	}
	err = exec.QueryRow(cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for user_projectrecord")
	}

CacheNoHooks:
	if !cached {
		userProjectrecordUpsertCacheMut.Lock()
		userProjectrecordUpsertCache[key] = cache
		userProjectrecordUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// DeleteG deletes a single UserProjectrecord record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *UserProjectrecord) DeleteG() (int64, error) {
	return o.Delete(boil.GetDB())
}

// DeleteP deletes a single UserProjectrecord record with an executor.
// DeleteP will match against the primary key column to find the record to delete.
// Panics on error.
func (o *UserProjectrecord) DeleteP(exec boil.Executor) int64 {
	rowsAff, err := o.Delete(exec)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return rowsAff
}

// DeleteGP deletes a single UserProjectrecord record.
// DeleteGP will match against the primary key column to find the record to delete.
// Panics on error.
func (o *UserProjectrecord) DeleteGP() int64 {
	rowsAff, err := o.Delete(boil.GetDB())
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return rowsAff
}

// Delete deletes a single UserProjectrecord record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *UserProjectrecord) Delete(exec boil.Executor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no UserProjectrecord provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), userProjectrecordPrimaryKeyMapping)
	sql := "DELETE FROM `user_projectrecord` WHERE `id`=?"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from user_projectrecord")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for user_projectrecord")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

func (q userProjectrecordQuery) DeleteAllG() (int64, error) {
	return q.DeleteAll(boil.GetDB())
}

// DeleteAllP deletes all rows, and panics on error.
func (q userProjectrecordQuery) DeleteAllP(exec boil.Executor) int64 {
	rowsAff, err := q.DeleteAll(exec)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return rowsAff
}

// DeleteAllGP deletes all rows, and panics on error.
func (q userProjectrecordQuery) DeleteAllGP() int64 {
	rowsAff, err := q.DeleteAll(boil.GetDB())
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return rowsAff
}

// DeleteAll deletes all matching rows.
func (q userProjectrecordQuery) DeleteAll(exec boil.Executor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no userProjectrecordQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from user_projectrecord")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for user_projectrecord")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o UserProjectrecordSlice) DeleteAllG() (int64, error) {
	return o.DeleteAll(boil.GetDB())
}

// DeleteAllP deletes all rows in the slice, using an executor, and panics on error.
func (o UserProjectrecordSlice) DeleteAllP(exec boil.Executor) int64 {
	rowsAff, err := o.DeleteAll(exec)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return rowsAff
}

// DeleteAllGP deletes all rows in the slice, and panics on error.
func (o UserProjectrecordSlice) DeleteAllGP() int64 {
	rowsAff, err := o.DeleteAll(boil.GetDB())
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return rowsAff
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o UserProjectrecordSlice) DeleteAll(exec boil.Executor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(userProjectrecordBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), userProjectrecordPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `user_projectrecord` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, userProjectrecordPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from userProjectrecord slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for user_projectrecord")
	}

	if len(userProjectrecordAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *UserProjectrecord) ReloadG() error {
	if o == nil {
		return errors.New("models: no UserProjectrecord provided for reload")
	}

	return o.Reload(boil.GetDB())
}

// ReloadP refetches the object from the database with an executor. Panics on error.
func (o *UserProjectrecord) ReloadP(exec boil.Executor) {
	if err := o.Reload(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadGP refetches the object from the database and panics on error.
func (o *UserProjectrecord) ReloadGP() {
	if err := o.Reload(boil.GetDB()); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *UserProjectrecord) Reload(exec boil.Executor) error {
	ret, err := FindUserProjectrecord(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *UserProjectrecordSlice) ReloadAllG() error {
	if o == nil {
		return errors.New("models: empty UserProjectrecordSlice provided for reload all")
	}

	return o.ReloadAll(boil.GetDB())
}

// ReloadAllP refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
// Panics on error.
func (o *UserProjectrecordSlice) ReloadAllP(exec boil.Executor) {
	if err := o.ReloadAll(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadAllGP refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
// Panics on error.
func (o *UserProjectrecordSlice) ReloadAllGP() {
	if err := o.ReloadAll(boil.GetDB()); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *UserProjectrecordSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := UserProjectrecordSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), userProjectrecordPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `user_projectrecord`.* FROM `user_projectrecord` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, userProjectrecordPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in UserProjectrecordSlice")
	}

	*o = slice

	return nil
}

// UserProjectrecordExistsG checks if the UserProjectrecord row exists.
func UserProjectrecordExistsG(iD int64) (bool, error) {
	return UserProjectrecordExists(boil.GetDB(), iD)
}

// UserProjectrecordExistsP checks if the UserProjectrecord row exists. Panics on error.
func UserProjectrecordExistsP(exec boil.Executor, iD int64) bool {
	e, err := UserProjectrecordExists(exec, iD)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// UserProjectrecordExistsGP checks if the UserProjectrecord row exists. Panics on error.
func UserProjectrecordExistsGP(iD int64) bool {
	e, err := UserProjectrecordExists(boil.GetDB(), iD)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// UserProjectrecordExists checks if the UserProjectrecord row exists.
func UserProjectrecordExists(exec boil.Executor, iD int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `user_projectrecord` where `id`=? limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}
	row := exec.QueryRow(sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if user_projectrecord exists")
	}

	return exists, nil
}

// Exists checks if the UserProjectrecord row exists.
func (o *UserProjectrecord) Exists(exec boil.Executor) (bool, error) {
	return UserProjectrecordExists(exec, o.ID)
}
