// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// UserOperatingrecord is an object representing the database table.
type UserOperatingrecord struct {
	ID            int64     `boil:"id" json:"id" toml:"id" yaml:"id"`
	OperationType string    `boil:"operation_type" json:"operation_type" toml:"operation_type" yaml:"operation_type"`
	CreatedAt     time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt     time.Time `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`
	UserID        uint64    `boil:"user_id" json:"user_id" toml:"user_id" yaml:"user_id"`

	R *userOperatingrecordR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L userOperatingrecordL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var UserOperatingrecordColumns = struct {
	ID            string
	OperationType string
	CreatedAt     string
	UpdatedAt     string
	UserID        string
}{
	ID:            "id",
	OperationType: "operation_type",
	CreatedAt:     "created_at",
	UpdatedAt:     "updated_at",
	UserID:        "user_id",
}

var UserOperatingrecordTableColumns = struct {
	ID            string
	OperationType string
	CreatedAt     string
	UpdatedAt     string
	UserID        string
}{
	ID:            "user_operatingrecord.id",
	OperationType: "user_operatingrecord.operation_type",
	CreatedAt:     "user_operatingrecord.created_at",
	UpdatedAt:     "user_operatingrecord.updated_at",
	UserID:        "user_operatingrecord.user_id",
}

// Generated where

type whereHelpertime_Time struct{ field string }

func (w whereHelpertime_Time) EQ(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.EQ, x)
}
func (w whereHelpertime_Time) NEQ(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.NEQ, x)
}
func (w whereHelpertime_Time) LT(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpertime_Time) LTE(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpertime_Time) GT(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpertime_Time) GTE(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

type whereHelperuint64 struct{ field string }

func (w whereHelperuint64) EQ(x uint64) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperuint64) NEQ(x uint64) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperuint64) LT(x uint64) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperuint64) LTE(x uint64) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperuint64) GT(x uint64) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperuint64) GTE(x uint64) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperuint64) IN(slice []uint64) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperuint64) NIN(slice []uint64) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

var UserOperatingrecordWhere = struct {
	ID            whereHelperint64
	OperationType whereHelperstring
	CreatedAt     whereHelpertime_Time
	UpdatedAt     whereHelpertime_Time
	UserID        whereHelperuint64
}{
	ID:            whereHelperint64{field: "`user_operatingrecord`.`id`"},
	OperationType: whereHelperstring{field: "`user_operatingrecord`.`operation_type`"},
	CreatedAt:     whereHelpertime_Time{field: "`user_operatingrecord`.`created_at`"},
	UpdatedAt:     whereHelpertime_Time{field: "`user_operatingrecord`.`updated_at`"},
	UserID:        whereHelperuint64{field: "`user_operatingrecord`.`user_id`"},
}

// UserOperatingrecordRels is where relationship names are stored.
var UserOperatingrecordRels = struct {
	User                             string
	OperatingRecordUserFilerecord    string
	OperatingRecordUserProjectrecord string
}{
	User:                             "User",
	OperatingRecordUserFilerecord:    "OperatingRecordUserFilerecord",
	OperatingRecordUserProjectrecord: "OperatingRecordUserProjectrecord",
}

// userOperatingrecordR is where relationships are stored.
type userOperatingrecordR struct {
	User                             *UserUser          `boil:"User" json:"User" toml:"User" yaml:"User"`
	OperatingRecordUserFilerecord    *UserFilerecord    `boil:"OperatingRecordUserFilerecord" json:"OperatingRecordUserFilerecord" toml:"OperatingRecordUserFilerecord" yaml:"OperatingRecordUserFilerecord"`
	OperatingRecordUserProjectrecord *UserProjectrecord `boil:"OperatingRecordUserProjectrecord" json:"OperatingRecordUserProjectrecord" toml:"OperatingRecordUserProjectrecord" yaml:"OperatingRecordUserProjectrecord"`
}

// NewStruct creates a new relationship struct
func (*userOperatingrecordR) NewStruct() *userOperatingrecordR {
	return &userOperatingrecordR{}
}

func (r *userOperatingrecordR) GetUser() *UserUser {
	if r == nil {
		return nil
	}
	return r.User
}

func (r *userOperatingrecordR) GetOperatingRecordUserFilerecord() *UserFilerecord {
	if r == nil {
		return nil
	}
	return r.OperatingRecordUserFilerecord
}

func (r *userOperatingrecordR) GetOperatingRecordUserProjectrecord() *UserProjectrecord {
	if r == nil {
		return nil
	}
	return r.OperatingRecordUserProjectrecord
}

// userOperatingrecordL is where Load methods for each relationship are stored.
type userOperatingrecordL struct{}

var (
	userOperatingrecordAllColumns            = []string{"id", "operation_type", "created_at", "updated_at", "user_id"}
	userOperatingrecordColumnsWithoutDefault = []string{"operation_type", "created_at", "updated_at", "user_id"}
	userOperatingrecordColumnsWithDefault    = []string{"id"}
	userOperatingrecordPrimaryKeyColumns     = []string{"id"}
	userOperatingrecordGeneratedColumns      = []string{}
)

type (
	// UserOperatingrecordSlice is an alias for a slice of pointers to UserOperatingrecord.
	// This should almost always be used instead of []UserOperatingrecord.
	UserOperatingrecordSlice []*UserOperatingrecord
	// UserOperatingrecordHook is the signature for custom UserOperatingrecord hook methods
	UserOperatingrecordHook func(boil.Executor, *UserOperatingrecord) error

	userOperatingrecordQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	userOperatingrecordType                 = reflect.TypeOf(&UserOperatingrecord{})
	userOperatingrecordMapping              = queries.MakeStructMapping(userOperatingrecordType)
	userOperatingrecordPrimaryKeyMapping, _ = queries.BindMapping(userOperatingrecordType, userOperatingrecordMapping, userOperatingrecordPrimaryKeyColumns)
	userOperatingrecordInsertCacheMut       sync.RWMutex
	userOperatingrecordInsertCache          = make(map[string]insertCache)
	userOperatingrecordUpdateCacheMut       sync.RWMutex
	userOperatingrecordUpdateCache          = make(map[string]updateCache)
	userOperatingrecordUpsertCacheMut       sync.RWMutex
	userOperatingrecordUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var userOperatingrecordAfterSelectMu sync.Mutex
var userOperatingrecordAfterSelectHooks []UserOperatingrecordHook

var userOperatingrecordBeforeInsertMu sync.Mutex
var userOperatingrecordBeforeInsertHooks []UserOperatingrecordHook
var userOperatingrecordAfterInsertMu sync.Mutex
var userOperatingrecordAfterInsertHooks []UserOperatingrecordHook

var userOperatingrecordBeforeUpdateMu sync.Mutex
var userOperatingrecordBeforeUpdateHooks []UserOperatingrecordHook
var userOperatingrecordAfterUpdateMu sync.Mutex
var userOperatingrecordAfterUpdateHooks []UserOperatingrecordHook

var userOperatingrecordBeforeDeleteMu sync.Mutex
var userOperatingrecordBeforeDeleteHooks []UserOperatingrecordHook
var userOperatingrecordAfterDeleteMu sync.Mutex
var userOperatingrecordAfterDeleteHooks []UserOperatingrecordHook

var userOperatingrecordBeforeUpsertMu sync.Mutex
var userOperatingrecordBeforeUpsertHooks []UserOperatingrecordHook
var userOperatingrecordAfterUpsertMu sync.Mutex
var userOperatingrecordAfterUpsertHooks []UserOperatingrecordHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *UserOperatingrecord) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range userOperatingrecordAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *UserOperatingrecord) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range userOperatingrecordBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *UserOperatingrecord) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range userOperatingrecordAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *UserOperatingrecord) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range userOperatingrecordBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *UserOperatingrecord) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range userOperatingrecordAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *UserOperatingrecord) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range userOperatingrecordBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *UserOperatingrecord) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range userOperatingrecordAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *UserOperatingrecord) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range userOperatingrecordBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *UserOperatingrecord) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range userOperatingrecordAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddUserOperatingrecordHook registers your hook function for all future operations.
func AddUserOperatingrecordHook(hookPoint boil.HookPoint, userOperatingrecordHook UserOperatingrecordHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		userOperatingrecordAfterSelectMu.Lock()
		userOperatingrecordAfterSelectHooks = append(userOperatingrecordAfterSelectHooks, userOperatingrecordHook)
		userOperatingrecordAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		userOperatingrecordBeforeInsertMu.Lock()
		userOperatingrecordBeforeInsertHooks = append(userOperatingrecordBeforeInsertHooks, userOperatingrecordHook)
		userOperatingrecordBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		userOperatingrecordAfterInsertMu.Lock()
		userOperatingrecordAfterInsertHooks = append(userOperatingrecordAfterInsertHooks, userOperatingrecordHook)
		userOperatingrecordAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		userOperatingrecordBeforeUpdateMu.Lock()
		userOperatingrecordBeforeUpdateHooks = append(userOperatingrecordBeforeUpdateHooks, userOperatingrecordHook)
		userOperatingrecordBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		userOperatingrecordAfterUpdateMu.Lock()
		userOperatingrecordAfterUpdateHooks = append(userOperatingrecordAfterUpdateHooks, userOperatingrecordHook)
		userOperatingrecordAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		userOperatingrecordBeforeDeleteMu.Lock()
		userOperatingrecordBeforeDeleteHooks = append(userOperatingrecordBeforeDeleteHooks, userOperatingrecordHook)
		userOperatingrecordBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		userOperatingrecordAfterDeleteMu.Lock()
		userOperatingrecordAfterDeleteHooks = append(userOperatingrecordAfterDeleteHooks, userOperatingrecordHook)
		userOperatingrecordAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		userOperatingrecordBeforeUpsertMu.Lock()
		userOperatingrecordBeforeUpsertHooks = append(userOperatingrecordBeforeUpsertHooks, userOperatingrecordHook)
		userOperatingrecordBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		userOperatingrecordAfterUpsertMu.Lock()
		userOperatingrecordAfterUpsertHooks = append(userOperatingrecordAfterUpsertHooks, userOperatingrecordHook)
		userOperatingrecordAfterUpsertMu.Unlock()
	}
}

// OneG returns a single userOperatingrecord record from the query using the global executor.
func (q userOperatingrecordQuery) OneG() (*UserOperatingrecord, error) {
	return q.One(boil.GetDB())
}

// OneGP returns a single userOperatingrecord record from the query using the global executor, and panics on error.
func (q userOperatingrecordQuery) OneGP() *UserOperatingrecord {
	o, err := q.One(boil.GetDB())
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// OneP returns a single userOperatingrecord record from the query, and panics on error.
func (q userOperatingrecordQuery) OneP(exec boil.Executor) *UserOperatingrecord {
	o, err := q.One(exec)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// One returns a single userOperatingrecord record from the query.
func (q userOperatingrecordQuery) One(exec boil.Executor) (*UserOperatingrecord, error) {
	o := &UserOperatingrecord{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for user_operatingrecord")
	}

	if err := o.doAfterSelectHooks(exec); err != nil {
		return o, err
	}

	return o, nil
}

// AllG returns all UserOperatingrecord records from the query using the global executor.
func (q userOperatingrecordQuery) AllG() (UserOperatingrecordSlice, error) {
	return q.All(boil.GetDB())
}

// AllGP returns all UserOperatingrecord records from the query using the global executor, and panics on error.
func (q userOperatingrecordQuery) AllGP() UserOperatingrecordSlice {
	o, err := q.All(boil.GetDB())
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// AllP returns all UserOperatingrecord records from the query, and panics on error.
func (q userOperatingrecordQuery) AllP(exec boil.Executor) UserOperatingrecordSlice {
	o, err := q.All(exec)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// All returns all UserOperatingrecord records from the query.
func (q userOperatingrecordQuery) All(exec boil.Executor) (UserOperatingrecordSlice, error) {
	var o []*UserOperatingrecord

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to UserOperatingrecord slice")
	}

	if len(userOperatingrecordAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountG returns the count of all UserOperatingrecord records in the query using the global executor
func (q userOperatingrecordQuery) CountG() (int64, error) {
	return q.Count(boil.GetDB())
}

// CountGP returns the count of all UserOperatingrecord records in the query using the global executor, and panics on error.
func (q userOperatingrecordQuery) CountGP() int64 {
	c, err := q.Count(boil.GetDB())
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return c
}

// CountP returns the count of all UserOperatingrecord records in the query, and panics on error.
func (q userOperatingrecordQuery) CountP(exec boil.Executor) int64 {
	c, err := q.Count(exec)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return c
}

// Count returns the count of all UserOperatingrecord records in the query.
func (q userOperatingrecordQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count user_operatingrecord rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table using the global executor.
func (q userOperatingrecordQuery) ExistsG() (bool, error) {
	return q.Exists(boil.GetDB())
}

// ExistsGP checks if the row exists in the table using the global executor, and panics on error.
func (q userOperatingrecordQuery) ExistsGP() bool {
	e, err := q.Exists(boil.GetDB())
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// ExistsP checks if the row exists in the table, and panics on error.
func (q userOperatingrecordQuery) ExistsP(exec boil.Executor) bool {
	e, err := q.Exists(exec)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// Exists checks if the row exists in the table.
func (q userOperatingrecordQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if user_operatingrecord exists")
	}

	return count > 0, nil
}

// User pointed to by the foreign key.
func (o *UserOperatingrecord) User(mods ...qm.QueryMod) userUserQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`uid` = ?", o.UserID),
	}

	queryMods = append(queryMods, mods...)

	return UserUsers(queryMods...)
}

// OperatingRecordUserFilerecord pointed to by the foreign key.
func (o *UserOperatingrecord) OperatingRecordUserFilerecord(mods ...qm.QueryMod) userFilerecordQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`operating_record_id` = ?", o.ID),
	}

	queryMods = append(queryMods, mods...)

	return UserFilerecords(queryMods...)
}

// OperatingRecordUserProjectrecord pointed to by the foreign key.
func (o *UserOperatingrecord) OperatingRecordUserProjectrecord(mods ...qm.QueryMod) userProjectrecordQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`operating_record_id` = ?", o.ID),
	}

	queryMods = append(queryMods, mods...)

	return UserProjectrecords(queryMods...)
}

// LoadUser allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (userOperatingrecordL) LoadUser(e boil.Executor, singular bool, maybeUserOperatingrecord interface{}, mods queries.Applicator) error {
	var slice []*UserOperatingrecord
	var object *UserOperatingrecord

	if singular {
		var ok bool
		object, ok = maybeUserOperatingrecord.(*UserOperatingrecord)
		if !ok {
			object = new(UserOperatingrecord)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeUserOperatingrecord)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeUserOperatingrecord))
			}
		}
	} else {
		s, ok := maybeUserOperatingrecord.(*[]*UserOperatingrecord)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeUserOperatingrecord)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeUserOperatingrecord))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &userOperatingrecordR{}
		}
		args[object.UserID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &userOperatingrecordR{}
			}

			args[obj.UserID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`user_user`),
		qm.WhereIn(`user_user.uid in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load UserUser")
	}

	var resultSlice []*UserUser
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice UserUser")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for user_user")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for user_user")
	}

	if len(userUserAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.User = foreign
		if foreign.R == nil {
			foreign.R = &userUserR{}
		}
		foreign.R.UserUserOperatingrecords = append(foreign.R.UserUserOperatingrecords, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.UserID == foreign.UID {
				local.R.User = foreign
				if foreign.R == nil {
					foreign.R = &userUserR{}
				}
				foreign.R.UserUserOperatingrecords = append(foreign.R.UserUserOperatingrecords, local)
				break
			}
		}
	}

	return nil
}

// LoadOperatingRecordUserFilerecord allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-1 relationship.
func (userOperatingrecordL) LoadOperatingRecordUserFilerecord(e boil.Executor, singular bool, maybeUserOperatingrecord interface{}, mods queries.Applicator) error {
	var slice []*UserOperatingrecord
	var object *UserOperatingrecord

	if singular {
		var ok bool
		object, ok = maybeUserOperatingrecord.(*UserOperatingrecord)
		if !ok {
			object = new(UserOperatingrecord)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeUserOperatingrecord)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeUserOperatingrecord))
			}
		}
	} else {
		s, ok := maybeUserOperatingrecord.(*[]*UserOperatingrecord)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeUserOperatingrecord)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeUserOperatingrecord))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &userOperatingrecordR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &userOperatingrecordR{}
			}

			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`user_filerecord`),
		qm.WhereIn(`user_filerecord.operating_record_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load UserFilerecord")
	}

	var resultSlice []*UserFilerecord
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice UserFilerecord")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for user_filerecord")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for user_filerecord")
	}

	if len(userFilerecordAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.OperatingRecordUserFilerecord = foreign
		if foreign.R == nil {
			foreign.R = &userFilerecordR{}
		}
		foreign.R.OperatingRecord = object
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ID == foreign.OperatingRecordID {
				local.R.OperatingRecordUserFilerecord = foreign
				if foreign.R == nil {
					foreign.R = &userFilerecordR{}
				}
				foreign.R.OperatingRecord = local
				break
			}
		}
	}

	return nil
}

// LoadOperatingRecordUserProjectrecord allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-1 relationship.
func (userOperatingrecordL) LoadOperatingRecordUserProjectrecord(e boil.Executor, singular bool, maybeUserOperatingrecord interface{}, mods queries.Applicator) error {
	var slice []*UserOperatingrecord
	var object *UserOperatingrecord

	if singular {
		var ok bool
		object, ok = maybeUserOperatingrecord.(*UserOperatingrecord)
		if !ok {
			object = new(UserOperatingrecord)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeUserOperatingrecord)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeUserOperatingrecord))
			}
		}
	} else {
		s, ok := maybeUserOperatingrecord.(*[]*UserOperatingrecord)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeUserOperatingrecord)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeUserOperatingrecord))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &userOperatingrecordR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &userOperatingrecordR{}
			}

			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`user_projectrecord`),
		qm.WhereIn(`user_projectrecord.operating_record_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load UserProjectrecord")
	}

	var resultSlice []*UserProjectrecord
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice UserProjectrecord")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for user_projectrecord")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for user_projectrecord")
	}

	if len(userProjectrecordAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.OperatingRecordUserProjectrecord = foreign
		if foreign.R == nil {
			foreign.R = &userProjectrecordR{}
		}
		foreign.R.OperatingRecord = object
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ID == foreign.OperatingRecordID {
				local.R.OperatingRecordUserProjectrecord = foreign
				if foreign.R == nil {
					foreign.R = &userProjectrecordR{}
				}
				foreign.R.OperatingRecord = local
				break
			}
		}
	}

	return nil
}

// SetUserG of the userOperatingrecord to the related item.
// Sets o.R.User to related.
// Adds o to related.R.UserUserOperatingrecords.
// Uses the global database handle.
func (o *UserOperatingrecord) SetUserG(insert bool, related *UserUser) error {
	return o.SetUser(boil.GetDB(), insert, related)
}

// SetUserP of the userOperatingrecord to the related item.
// Sets o.R.User to related.
// Adds o to related.R.UserUserOperatingrecords.
// Panics on error.
func (o *UserOperatingrecord) SetUserP(exec boil.Executor, insert bool, related *UserUser) {
	if err := o.SetUser(exec, insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetUserGP of the userOperatingrecord to the related item.
// Sets o.R.User to related.
// Adds o to related.R.UserUserOperatingrecords.
// Uses the global database handle and panics on error.
func (o *UserOperatingrecord) SetUserGP(insert bool, related *UserUser) {
	if err := o.SetUser(boil.GetDB(), insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetUser of the userOperatingrecord to the related item.
// Sets o.R.User to related.
// Adds o to related.R.UserUserOperatingrecords.
func (o *UserOperatingrecord) SetUser(exec boil.Executor, insert bool, related *UserUser) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `user_operatingrecord` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"user_id"}),
		strmangle.WhereClause("`", "`", 0, userOperatingrecordPrimaryKeyColumns),
	)
	values := []interface{}{related.UID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.UserID = related.UID
	if o.R == nil {
		o.R = &userOperatingrecordR{
			User: related,
		}
	} else {
		o.R.User = related
	}

	if related.R == nil {
		related.R = &userUserR{
			UserUserOperatingrecords: UserOperatingrecordSlice{o},
		}
	} else {
		related.R.UserUserOperatingrecords = append(related.R.UserUserOperatingrecords, o)
	}

	return nil
}

// SetOperatingRecordUserFilerecordG of the userOperatingrecord to the related item.
// Sets o.R.OperatingRecordUserFilerecord to related.
// Adds o to related.R.OperatingRecord.
// Uses the global database handle.
func (o *UserOperatingrecord) SetOperatingRecordUserFilerecordG(insert bool, related *UserFilerecord) error {
	return o.SetOperatingRecordUserFilerecord(boil.GetDB(), insert, related)
}

// SetOperatingRecordUserFilerecordP of the userOperatingrecord to the related item.
// Sets o.R.OperatingRecordUserFilerecord to related.
// Adds o to related.R.OperatingRecord.
// Panics on error.
func (o *UserOperatingrecord) SetOperatingRecordUserFilerecordP(exec boil.Executor, insert bool, related *UserFilerecord) {
	if err := o.SetOperatingRecordUserFilerecord(exec, insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetOperatingRecordUserFilerecordGP of the userOperatingrecord to the related item.
// Sets o.R.OperatingRecordUserFilerecord to related.
// Adds o to related.R.OperatingRecord.
// Uses the global database handle and panics on error.
func (o *UserOperatingrecord) SetOperatingRecordUserFilerecordGP(insert bool, related *UserFilerecord) {
	if err := o.SetOperatingRecordUserFilerecord(boil.GetDB(), insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetOperatingRecordUserFilerecord of the userOperatingrecord to the related item.
// Sets o.R.OperatingRecordUserFilerecord to related.
// Adds o to related.R.OperatingRecord.
func (o *UserOperatingrecord) SetOperatingRecordUserFilerecord(exec boil.Executor, insert bool, related *UserFilerecord) error {
	var err error

	if insert {
		related.OperatingRecordID = o.ID

		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	} else {
		updateQuery := fmt.Sprintf(
			"UPDATE `user_filerecord` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, []string{"operating_record_id"}),
			strmangle.WhereClause("`", "`", 0, userFilerecordPrimaryKeyColumns),
		)
		values := []interface{}{o.ID, related.ID}

		if boil.DebugMode {
			fmt.Fprintln(boil.DebugWriter, updateQuery)
			fmt.Fprintln(boil.DebugWriter, values)
		}
		if _, err = exec.Exec(updateQuery, values...); err != nil {
			return errors.Wrap(err, "failed to update foreign table")
		}

		related.OperatingRecordID = o.ID
	}

	if o.R == nil {
		o.R = &userOperatingrecordR{
			OperatingRecordUserFilerecord: related,
		}
	} else {
		o.R.OperatingRecordUserFilerecord = related
	}

	if related.R == nil {
		related.R = &userFilerecordR{
			OperatingRecord: o,
		}
	} else {
		related.R.OperatingRecord = o
	}
	return nil
}

// SetOperatingRecordUserProjectrecordG of the userOperatingrecord to the related item.
// Sets o.R.OperatingRecordUserProjectrecord to related.
// Adds o to related.R.OperatingRecord.
// Uses the global database handle.
func (o *UserOperatingrecord) SetOperatingRecordUserProjectrecordG(insert bool, related *UserProjectrecord) error {
	return o.SetOperatingRecordUserProjectrecord(boil.GetDB(), insert, related)
}

// SetOperatingRecordUserProjectrecordP of the userOperatingrecord to the related item.
// Sets o.R.OperatingRecordUserProjectrecord to related.
// Adds o to related.R.OperatingRecord.
// Panics on error.
func (o *UserOperatingrecord) SetOperatingRecordUserProjectrecordP(exec boil.Executor, insert bool, related *UserProjectrecord) {
	if err := o.SetOperatingRecordUserProjectrecord(exec, insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetOperatingRecordUserProjectrecordGP of the userOperatingrecord to the related item.
// Sets o.R.OperatingRecordUserProjectrecord to related.
// Adds o to related.R.OperatingRecord.
// Uses the global database handle and panics on error.
func (o *UserOperatingrecord) SetOperatingRecordUserProjectrecordGP(insert bool, related *UserProjectrecord) {
	if err := o.SetOperatingRecordUserProjectrecord(boil.GetDB(), insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetOperatingRecordUserProjectrecord of the userOperatingrecord to the related item.
// Sets o.R.OperatingRecordUserProjectrecord to related.
// Adds o to related.R.OperatingRecord.
func (o *UserOperatingrecord) SetOperatingRecordUserProjectrecord(exec boil.Executor, insert bool, related *UserProjectrecord) error {
	var err error

	if insert {
		related.OperatingRecordID = o.ID

		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	} else {
		updateQuery := fmt.Sprintf(
			"UPDATE `user_projectrecord` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, []string{"operating_record_id"}),
			strmangle.WhereClause("`", "`", 0, userProjectrecordPrimaryKeyColumns),
		)
		values := []interface{}{o.ID, related.ID}

		if boil.DebugMode {
			fmt.Fprintln(boil.DebugWriter, updateQuery)
			fmt.Fprintln(boil.DebugWriter, values)
		}
		if _, err = exec.Exec(updateQuery, values...); err != nil {
			return errors.Wrap(err, "failed to update foreign table")
		}

		related.OperatingRecordID = o.ID
	}

	if o.R == nil {
		o.R = &userOperatingrecordR{
			OperatingRecordUserProjectrecord: related,
		}
	} else {
		o.R.OperatingRecordUserProjectrecord = related
	}

	if related.R == nil {
		related.R = &userProjectrecordR{
			OperatingRecord: o,
		}
	} else {
		related.R.OperatingRecord = o
	}
	return nil
}

// UserOperatingrecords retrieves all the records using an executor.
func UserOperatingrecords(mods ...qm.QueryMod) userOperatingrecordQuery {
	mods = append(mods, qm.From("`user_operatingrecord`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`user_operatingrecord`.*"})
	}

	return userOperatingrecordQuery{q}
}

// FindUserOperatingrecordG retrieves a single record by ID.
func FindUserOperatingrecordG(iD int64, selectCols ...string) (*UserOperatingrecord, error) {
	return FindUserOperatingrecord(boil.GetDB(), iD, selectCols...)
}

// FindUserOperatingrecordP retrieves a single record by ID with an executor, and panics on error.
func FindUserOperatingrecordP(exec boil.Executor, iD int64, selectCols ...string) *UserOperatingrecord {
	retobj, err := FindUserOperatingrecord(exec, iD, selectCols...)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return retobj
}

// FindUserOperatingrecordGP retrieves a single record by ID, and panics on error.
func FindUserOperatingrecordGP(iD int64, selectCols ...string) *UserOperatingrecord {
	retobj, err := FindUserOperatingrecord(boil.GetDB(), iD, selectCols...)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return retobj
}

// FindUserOperatingrecord retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindUserOperatingrecord(exec boil.Executor, iD int64, selectCols ...string) (*UserOperatingrecord, error) {
	userOperatingrecordObj := &UserOperatingrecord{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `user_operatingrecord` where `id`=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(nil, exec, userOperatingrecordObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from user_operatingrecord")
	}

	if err = userOperatingrecordObj.doAfterSelectHooks(exec); err != nil {
		return userOperatingrecordObj, err
	}

	return userOperatingrecordObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *UserOperatingrecord) InsertG(columns boil.Columns) error {
	return o.Insert(boil.GetDB(), columns)
}

// InsertP a single record using an executor, and panics on error. See Insert
// for whitelist behavior description.
func (o *UserOperatingrecord) InsertP(exec boil.Executor, columns boil.Columns) {
	if err := o.Insert(exec, columns); err != nil {
		panic(boil.WrapErr(err))
	}
}

// InsertGP a single record, and panics on error. See Insert for whitelist
// behavior description.
func (o *UserOperatingrecord) InsertGP(columns boil.Columns) {
	if err := o.Insert(boil.GetDB(), columns); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *UserOperatingrecord) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no user_operatingrecord provided for insertion")
	}

	var err error
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}
	if o.UpdatedAt.IsZero() {
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(userOperatingrecordColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	userOperatingrecordInsertCacheMut.RLock()
	cache, cached := userOperatingrecordInsertCache[key]
	userOperatingrecordInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			userOperatingrecordAllColumns,
			userOperatingrecordColumnsWithDefault,
			userOperatingrecordColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(userOperatingrecordType, userOperatingrecordMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(userOperatingrecordType, userOperatingrecordMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `user_operatingrecord` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `user_operatingrecord` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `user_operatingrecord` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, userOperatingrecordPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	result, err := exec.Exec(cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into user_operatingrecord")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = int64(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == userOperatingrecordMapping["id"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, identifierCols...)
	}
	err = exec.QueryRow(cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for user_operatingrecord")
	}

CacheNoHooks:
	if !cached {
		userOperatingrecordInsertCacheMut.Lock()
		userOperatingrecordInsertCache[key] = cache
		userOperatingrecordInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// UpdateG a single UserOperatingrecord record using the global executor.
// See Update for more documentation.
func (o *UserOperatingrecord) UpdateG(columns boil.Columns) (int64, error) {
	return o.Update(boil.GetDB(), columns)
}

// UpdateP uses an executor to update the UserOperatingrecord, and panics on error.
// See Update for more documentation.
func (o *UserOperatingrecord) UpdateP(exec boil.Executor, columns boil.Columns) int64 {
	rowsAff, err := o.Update(exec, columns)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return rowsAff
}

// UpdateGP a single UserOperatingrecord record using the global executor. Panics on error.
// See Update for more documentation.
func (o *UserOperatingrecord) UpdateGP(columns boil.Columns) int64 {
	rowsAff, err := o.Update(boil.GetDB(), columns)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return rowsAff
}

// Update uses an executor to update the UserOperatingrecord.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *UserOperatingrecord) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	currTime := time.Now().In(boil.GetLocation())

	o.UpdatedAt = currTime

	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	userOperatingrecordUpdateCacheMut.RLock()
	cache, cached := userOperatingrecordUpdateCache[key]
	userOperatingrecordUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			userOperatingrecordAllColumns,
			userOperatingrecordPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update user_operatingrecord, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `user_operatingrecord` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, userOperatingrecordPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(userOperatingrecordType, userOperatingrecordMapping, append(wl, userOperatingrecordPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update user_operatingrecord row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for user_operatingrecord")
	}

	if !cached {
		userOperatingrecordUpdateCacheMut.Lock()
		userOperatingrecordUpdateCache[key] = cache
		userOperatingrecordUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(exec)
}

// UpdateAllP updates all rows with matching column names, and panics on error.
func (q userOperatingrecordQuery) UpdateAllP(exec boil.Executor, cols M) int64 {
	rowsAff, err := q.UpdateAll(exec, cols)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return rowsAff
}

// UpdateAllG updates all rows with the specified column values.
func (q userOperatingrecordQuery) UpdateAllG(cols M) (int64, error) {
	return q.UpdateAll(boil.GetDB(), cols)
}

// UpdateAllGP updates all rows with the specified column values, and panics on error.
func (q userOperatingrecordQuery) UpdateAllGP(cols M) int64 {
	rowsAff, err := q.UpdateAll(boil.GetDB(), cols)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return rowsAff
}

// UpdateAll updates all rows with the specified column values.
func (q userOperatingrecordQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for user_operatingrecord")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for user_operatingrecord")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o UserOperatingrecordSlice) UpdateAllG(cols M) (int64, error) {
	return o.UpdateAll(boil.GetDB(), cols)
}

// UpdateAllGP updates all rows with the specified column values, and panics on error.
func (o UserOperatingrecordSlice) UpdateAllGP(cols M) int64 {
	rowsAff, err := o.UpdateAll(boil.GetDB(), cols)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return rowsAff
}

// UpdateAllP updates all rows with the specified column values, and panics on error.
func (o UserOperatingrecordSlice) UpdateAllP(exec boil.Executor, cols M) int64 {
	rowsAff, err := o.UpdateAll(exec, cols)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return rowsAff
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o UserOperatingrecordSlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), userOperatingrecordPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `user_operatingrecord` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, userOperatingrecordPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in userOperatingrecord slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all userOperatingrecord")
	}
	return rowsAff, nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *UserOperatingrecord) UpsertG(updateColumns, insertColumns boil.Columns) error {
	return o.Upsert(boil.GetDB(), updateColumns, insertColumns)
}

// UpsertGP attempts an insert, and does an update or ignore on conflict. Panics on error.
func (o *UserOperatingrecord) UpsertGP(updateColumns, insertColumns boil.Columns) {
	if err := o.Upsert(boil.GetDB(), updateColumns, insertColumns); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpsertP attempts an insert using an executor, and does an update or ignore on conflict.
// UpsertP panics on error.
func (o *UserOperatingrecord) UpsertP(exec boil.Executor, updateColumns, insertColumns boil.Columns) {
	if err := o.Upsert(exec, updateColumns, insertColumns); err != nil {
		panic(boil.WrapErr(err))
	}
}

var mySQLUserOperatingrecordUniqueColumns = []string{
	"id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *UserOperatingrecord) Upsert(exec boil.Executor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no user_operatingrecord provided for upsert")
	}
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}
	o.UpdatedAt = currTime

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(userOperatingrecordColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLUserOperatingrecordUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	userOperatingrecordUpsertCacheMut.RLock()
	cache, cached := userOperatingrecordUpsertCache[key]
	userOperatingrecordUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			userOperatingrecordAllColumns,
			userOperatingrecordColumnsWithDefault,
			userOperatingrecordColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			userOperatingrecordAllColumns,
			userOperatingrecordPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert user_operatingrecord, could not build update column list")
		}

		ret := strmangle.SetComplement(userOperatingrecordAllColumns, strmangle.SetIntersect(insert, update))

		cache.query = buildUpsertQueryMySQL(dialect, "`user_operatingrecord`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `user_operatingrecord` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(userOperatingrecordType, userOperatingrecordMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(userOperatingrecordType, userOperatingrecordMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	result, err := exec.Exec(cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for user_operatingrecord")
	}

	var lastID int64
	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = int64(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == userOperatingrecordMapping["id"] {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(userOperatingrecordType, userOperatingrecordMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for user_operatingrecord")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, nzUniqueCols...)
	}
	err = exec.QueryRow(cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for user_operatingrecord")
	}

CacheNoHooks:
	if !cached {
		userOperatingrecordUpsertCacheMut.Lock()
		userOperatingrecordUpsertCache[key] = cache
		userOperatingrecordUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// DeleteG deletes a single UserOperatingrecord record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *UserOperatingrecord) DeleteG() (int64, error) {
	return o.Delete(boil.GetDB())
}

// DeleteP deletes a single UserOperatingrecord record with an executor.
// DeleteP will match against the primary key column to find the record to delete.
// Panics on error.
func (o *UserOperatingrecord) DeleteP(exec boil.Executor) int64 {
	rowsAff, err := o.Delete(exec)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return rowsAff
}

// DeleteGP deletes a single UserOperatingrecord record.
// DeleteGP will match against the primary key column to find the record to delete.
// Panics on error.
func (o *UserOperatingrecord) DeleteGP() int64 {
	rowsAff, err := o.Delete(boil.GetDB())
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return rowsAff
}

// Delete deletes a single UserOperatingrecord record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *UserOperatingrecord) Delete(exec boil.Executor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no UserOperatingrecord provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), userOperatingrecordPrimaryKeyMapping)
	sql := "DELETE FROM `user_operatingrecord` WHERE `id`=?"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from user_operatingrecord")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for user_operatingrecord")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

func (q userOperatingrecordQuery) DeleteAllG() (int64, error) {
	return q.DeleteAll(boil.GetDB())
}

// DeleteAllP deletes all rows, and panics on error.
func (q userOperatingrecordQuery) DeleteAllP(exec boil.Executor) int64 {
	rowsAff, err := q.DeleteAll(exec)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return rowsAff
}

// DeleteAllGP deletes all rows, and panics on error.
func (q userOperatingrecordQuery) DeleteAllGP() int64 {
	rowsAff, err := q.DeleteAll(boil.GetDB())
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return rowsAff
}

// DeleteAll deletes all matching rows.
func (q userOperatingrecordQuery) DeleteAll(exec boil.Executor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no userOperatingrecordQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from user_operatingrecord")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for user_operatingrecord")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o UserOperatingrecordSlice) DeleteAllG() (int64, error) {
	return o.DeleteAll(boil.GetDB())
}

// DeleteAllP deletes all rows in the slice, using an executor, and panics on error.
func (o UserOperatingrecordSlice) DeleteAllP(exec boil.Executor) int64 {
	rowsAff, err := o.DeleteAll(exec)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return rowsAff
}

// DeleteAllGP deletes all rows in the slice, and panics on error.
func (o UserOperatingrecordSlice) DeleteAllGP() int64 {
	rowsAff, err := o.DeleteAll(boil.GetDB())
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return rowsAff
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o UserOperatingrecordSlice) DeleteAll(exec boil.Executor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(userOperatingrecordBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), userOperatingrecordPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `user_operatingrecord` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, userOperatingrecordPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from userOperatingrecord slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for user_operatingrecord")
	}

	if len(userOperatingrecordAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *UserOperatingrecord) ReloadG() error {
	if o == nil {
		return errors.New("models: no UserOperatingrecord provided for reload")
	}

	return o.Reload(boil.GetDB())
}

// ReloadP refetches the object from the database with an executor. Panics on error.
func (o *UserOperatingrecord) ReloadP(exec boil.Executor) {
	if err := o.Reload(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadGP refetches the object from the database and panics on error.
func (o *UserOperatingrecord) ReloadGP() {
	if err := o.Reload(boil.GetDB()); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *UserOperatingrecord) Reload(exec boil.Executor) error {
	ret, err := FindUserOperatingrecord(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *UserOperatingrecordSlice) ReloadAllG() error {
	if o == nil {
		return errors.New("models: empty UserOperatingrecordSlice provided for reload all")
	}

	return o.ReloadAll(boil.GetDB())
}

// ReloadAllP refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
// Panics on error.
func (o *UserOperatingrecordSlice) ReloadAllP(exec boil.Executor) {
	if err := o.ReloadAll(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadAllGP refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
// Panics on error.
func (o *UserOperatingrecordSlice) ReloadAllGP() {
	if err := o.ReloadAll(boil.GetDB()); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *UserOperatingrecordSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := UserOperatingrecordSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), userOperatingrecordPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `user_operatingrecord`.* FROM `user_operatingrecord` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, userOperatingrecordPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in UserOperatingrecordSlice")
	}

	*o = slice

	return nil
}

// UserOperatingrecordExistsG checks if the UserOperatingrecord row exists.
func UserOperatingrecordExistsG(iD int64) (bool, error) {
	return UserOperatingrecordExists(boil.GetDB(), iD)
}

// UserOperatingrecordExistsP checks if the UserOperatingrecord row exists. Panics on error.
func UserOperatingrecordExistsP(exec boil.Executor, iD int64) bool {
	e, err := UserOperatingrecordExists(exec, iD)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// UserOperatingrecordExistsGP checks if the UserOperatingrecord row exists. Panics on error.
func UserOperatingrecordExistsGP(iD int64) bool {
	e, err := UserOperatingrecordExists(boil.GetDB(), iD)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// UserOperatingrecordExists checks if the UserOperatingrecord row exists.
func UserOperatingrecordExists(exec boil.Executor, iD int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `user_operatingrecord` where `id`=? limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}
	row := exec.QueryRow(sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if user_operatingrecord exists")
	}

	return exists, nil
}

// Exists checks if the UserOperatingrecord row exists.
func (o *UserOperatingrecord) Exists(exec boil.Executor) (bool, error) {
	return UserOperatingrecordExists(exec, o.ID)
}
