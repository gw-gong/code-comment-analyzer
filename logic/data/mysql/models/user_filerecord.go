// Code generated by SQLBoiler 4.18.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// UserFilerecord is an object representing the database table.
type UserFilerecord struct {
	ID                int64  `boil:"id" json:"id" toml:"id" yaml:"id"`
	FileContent       string `boil:"file_content" json:"file_content" toml:"file_content" yaml:"file_content"`
	FileType          string `boil:"file_type" json:"file_type" toml:"file_type" yaml:"file_type"`
	OperatingRecordID int64  `boil:"operating_record_id" json:"operating_record_id" toml:"operating_record_id" yaml:"operating_record_id"`

	R *userFilerecordR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L userFilerecordL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var UserFilerecordColumns = struct {
	ID                string
	FileContent       string
	FileType          string
	OperatingRecordID string
}{
	ID:                "id",
	FileContent:       "file_content",
	FileType:          "file_type",
	OperatingRecordID: "operating_record_id",
}

var UserFilerecordTableColumns = struct {
	ID                string
	FileContent       string
	FileType          string
	OperatingRecordID string
}{
	ID:                "user_filerecord.id",
	FileContent:       "user_filerecord.file_content",
	FileType:          "user_filerecord.file_type",
	OperatingRecordID: "user_filerecord.operating_record_id",
}

// Generated where

type whereHelperint64 struct{ field string }

func (w whereHelperint64) EQ(x int64) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperint64) NEQ(x int64) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperint64) LT(x int64) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperint64) LTE(x int64) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperint64) GT(x int64) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperint64) GTE(x int64) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperint64) IN(slice []int64) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperint64) NIN(slice []int64) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

type whereHelperstring struct{ field string }

func (w whereHelperstring) EQ(x string) qm.QueryMod    { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperstring) NEQ(x string) qm.QueryMod   { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperstring) LT(x string) qm.QueryMod    { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperstring) LTE(x string) qm.QueryMod   { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperstring) GT(x string) qm.QueryMod    { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperstring) GTE(x string) qm.QueryMod   { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperstring) LIKE(x string) qm.QueryMod  { return qm.Where(w.field+" LIKE ?", x) }
func (w whereHelperstring) NLIKE(x string) qm.QueryMod { return qm.Where(w.field+" NOT LIKE ?", x) }
func (w whereHelperstring) IN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperstring) NIN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

var UserFilerecordWhere = struct {
	ID                whereHelperint64
	FileContent       whereHelperstring
	FileType          whereHelperstring
	OperatingRecordID whereHelperint64
}{
	ID:                whereHelperint64{field: "`user_filerecord`.`id`"},
	FileContent:       whereHelperstring{field: "`user_filerecord`.`file_content`"},
	FileType:          whereHelperstring{field: "`user_filerecord`.`file_type`"},
	OperatingRecordID: whereHelperint64{field: "`user_filerecord`.`operating_record_id`"},
}

// UserFilerecordRels is where relationship names are stored.
var UserFilerecordRels = struct {
	OperatingRecord string
}{
	OperatingRecord: "OperatingRecord",
}

// userFilerecordR is where relationships are stored.
type userFilerecordR struct {
	OperatingRecord *UserOperatingrecord `boil:"OperatingRecord" json:"OperatingRecord" toml:"OperatingRecord" yaml:"OperatingRecord"`
}

// NewStruct creates a new relationship struct
func (*userFilerecordR) NewStruct() *userFilerecordR {
	return &userFilerecordR{}
}

func (r *userFilerecordR) GetOperatingRecord() *UserOperatingrecord {
	if r == nil {
		return nil
	}
	return r.OperatingRecord
}

// userFilerecordL is where Load methods for each relationship are stored.
type userFilerecordL struct{}

var (
	userFilerecordAllColumns            = []string{"id", "file_content", "file_type", "operating_record_id"}
	userFilerecordColumnsWithoutDefault = []string{"file_content", "file_type", "operating_record_id"}
	userFilerecordColumnsWithDefault    = []string{"id"}
	userFilerecordPrimaryKeyColumns     = []string{"id"}
	userFilerecordGeneratedColumns      = []string{}
)

type (
	// UserFilerecordSlice is an alias for a slice of pointers to UserFilerecord.
	// This should almost always be used instead of []UserFilerecord.
	UserFilerecordSlice []*UserFilerecord
	// UserFilerecordHook is the signature for custom UserFilerecord hook methods
	UserFilerecordHook func(boil.Executor, *UserFilerecord) error

	userFilerecordQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	userFilerecordType                 = reflect.TypeOf(&UserFilerecord{})
	userFilerecordMapping              = queries.MakeStructMapping(userFilerecordType)
	userFilerecordPrimaryKeyMapping, _ = queries.BindMapping(userFilerecordType, userFilerecordMapping, userFilerecordPrimaryKeyColumns)
	userFilerecordInsertCacheMut       sync.RWMutex
	userFilerecordInsertCache          = make(map[string]insertCache)
	userFilerecordUpdateCacheMut       sync.RWMutex
	userFilerecordUpdateCache          = make(map[string]updateCache)
	userFilerecordUpsertCacheMut       sync.RWMutex
	userFilerecordUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var userFilerecordAfterSelectMu sync.Mutex
var userFilerecordAfterSelectHooks []UserFilerecordHook

var userFilerecordBeforeInsertMu sync.Mutex
var userFilerecordBeforeInsertHooks []UserFilerecordHook
var userFilerecordAfterInsertMu sync.Mutex
var userFilerecordAfterInsertHooks []UserFilerecordHook

var userFilerecordBeforeUpdateMu sync.Mutex
var userFilerecordBeforeUpdateHooks []UserFilerecordHook
var userFilerecordAfterUpdateMu sync.Mutex
var userFilerecordAfterUpdateHooks []UserFilerecordHook

var userFilerecordBeforeDeleteMu sync.Mutex
var userFilerecordBeforeDeleteHooks []UserFilerecordHook
var userFilerecordAfterDeleteMu sync.Mutex
var userFilerecordAfterDeleteHooks []UserFilerecordHook

var userFilerecordBeforeUpsertMu sync.Mutex
var userFilerecordBeforeUpsertHooks []UserFilerecordHook
var userFilerecordAfterUpsertMu sync.Mutex
var userFilerecordAfterUpsertHooks []UserFilerecordHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *UserFilerecord) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range userFilerecordAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *UserFilerecord) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range userFilerecordBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *UserFilerecord) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range userFilerecordAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *UserFilerecord) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range userFilerecordBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *UserFilerecord) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range userFilerecordAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *UserFilerecord) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range userFilerecordBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *UserFilerecord) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range userFilerecordAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *UserFilerecord) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range userFilerecordBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *UserFilerecord) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range userFilerecordAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddUserFilerecordHook registers your hook function for all future operations.
func AddUserFilerecordHook(hookPoint boil.HookPoint, userFilerecordHook UserFilerecordHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		userFilerecordAfterSelectMu.Lock()
		userFilerecordAfterSelectHooks = append(userFilerecordAfterSelectHooks, userFilerecordHook)
		userFilerecordAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		userFilerecordBeforeInsertMu.Lock()
		userFilerecordBeforeInsertHooks = append(userFilerecordBeforeInsertHooks, userFilerecordHook)
		userFilerecordBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		userFilerecordAfterInsertMu.Lock()
		userFilerecordAfterInsertHooks = append(userFilerecordAfterInsertHooks, userFilerecordHook)
		userFilerecordAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		userFilerecordBeforeUpdateMu.Lock()
		userFilerecordBeforeUpdateHooks = append(userFilerecordBeforeUpdateHooks, userFilerecordHook)
		userFilerecordBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		userFilerecordAfterUpdateMu.Lock()
		userFilerecordAfterUpdateHooks = append(userFilerecordAfterUpdateHooks, userFilerecordHook)
		userFilerecordAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		userFilerecordBeforeDeleteMu.Lock()
		userFilerecordBeforeDeleteHooks = append(userFilerecordBeforeDeleteHooks, userFilerecordHook)
		userFilerecordBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		userFilerecordAfterDeleteMu.Lock()
		userFilerecordAfterDeleteHooks = append(userFilerecordAfterDeleteHooks, userFilerecordHook)
		userFilerecordAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		userFilerecordBeforeUpsertMu.Lock()
		userFilerecordBeforeUpsertHooks = append(userFilerecordBeforeUpsertHooks, userFilerecordHook)
		userFilerecordBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		userFilerecordAfterUpsertMu.Lock()
		userFilerecordAfterUpsertHooks = append(userFilerecordAfterUpsertHooks, userFilerecordHook)
		userFilerecordAfterUpsertMu.Unlock()
	}
}

// OneG returns a single userFilerecord record from the query using the global executor.
func (q userFilerecordQuery) OneG() (*UserFilerecord, error) {
	return q.One(boil.GetDB())
}

// OneGP returns a single userFilerecord record from the query using the global executor, and panics on error.
func (q userFilerecordQuery) OneGP() *UserFilerecord {
	o, err := q.One(boil.GetDB())
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// OneP returns a single userFilerecord record from the query, and panics on error.
func (q userFilerecordQuery) OneP(exec boil.Executor) *UserFilerecord {
	o, err := q.One(exec)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// One returns a single userFilerecord record from the query.
func (q userFilerecordQuery) One(exec boil.Executor) (*UserFilerecord, error) {
	o := &UserFilerecord{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for user_filerecord")
	}

	if err := o.doAfterSelectHooks(exec); err != nil {
		return o, err
	}

	return o, nil
}

// AllG returns all UserFilerecord records from the query using the global executor.
func (q userFilerecordQuery) AllG() (UserFilerecordSlice, error) {
	return q.All(boil.GetDB())
}

// AllGP returns all UserFilerecord records from the query using the global executor, and panics on error.
func (q userFilerecordQuery) AllGP() UserFilerecordSlice {
	o, err := q.All(boil.GetDB())
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// AllP returns all UserFilerecord records from the query, and panics on error.
func (q userFilerecordQuery) AllP(exec boil.Executor) UserFilerecordSlice {
	o, err := q.All(exec)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// All returns all UserFilerecord records from the query.
func (q userFilerecordQuery) All(exec boil.Executor) (UserFilerecordSlice, error) {
	var o []*UserFilerecord

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to UserFilerecord slice")
	}

	if len(userFilerecordAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountG returns the count of all UserFilerecord records in the query using the global executor
func (q userFilerecordQuery) CountG() (int64, error) {
	return q.Count(boil.GetDB())
}

// CountGP returns the count of all UserFilerecord records in the query using the global executor, and panics on error.
func (q userFilerecordQuery) CountGP() int64 {
	c, err := q.Count(boil.GetDB())
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return c
}

// CountP returns the count of all UserFilerecord records in the query, and panics on error.
func (q userFilerecordQuery) CountP(exec boil.Executor) int64 {
	c, err := q.Count(exec)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return c
}

// Count returns the count of all UserFilerecord records in the query.
func (q userFilerecordQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count user_filerecord rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table using the global executor.
func (q userFilerecordQuery) ExistsG() (bool, error) {
	return q.Exists(boil.GetDB())
}

// ExistsGP checks if the row exists in the table using the global executor, and panics on error.
func (q userFilerecordQuery) ExistsGP() bool {
	e, err := q.Exists(boil.GetDB())
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// ExistsP checks if the row exists in the table, and panics on error.
func (q userFilerecordQuery) ExistsP(exec boil.Executor) bool {
	e, err := q.Exists(exec)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// Exists checks if the row exists in the table.
func (q userFilerecordQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if user_filerecord exists")
	}

	return count > 0, nil
}

// OperatingRecord pointed to by the foreign key.
func (o *UserFilerecord) OperatingRecord(mods ...qm.QueryMod) userOperatingrecordQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`id` = ?", o.OperatingRecordID),
	}

	queryMods = append(queryMods, mods...)

	return UserOperatingrecords(queryMods...)
}

// LoadOperatingRecord allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (userFilerecordL) LoadOperatingRecord(e boil.Executor, singular bool, maybeUserFilerecord interface{}, mods queries.Applicator) error {
	var slice []*UserFilerecord
	var object *UserFilerecord

	if singular {
		var ok bool
		object, ok = maybeUserFilerecord.(*UserFilerecord)
		if !ok {
			object = new(UserFilerecord)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeUserFilerecord)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeUserFilerecord))
			}
		}
	} else {
		s, ok := maybeUserFilerecord.(*[]*UserFilerecord)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeUserFilerecord)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeUserFilerecord))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &userFilerecordR{}
		}
		args[object.OperatingRecordID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &userFilerecordR{}
			}

			args[obj.OperatingRecordID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`user_operatingrecord`),
		qm.WhereIn(`user_operatingrecord.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load UserOperatingrecord")
	}

	var resultSlice []*UserOperatingrecord
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice UserOperatingrecord")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for user_operatingrecord")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for user_operatingrecord")
	}

	if len(userOperatingrecordAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.OperatingRecord = foreign
		if foreign.R == nil {
			foreign.R = &userOperatingrecordR{}
		}
		foreign.R.OperatingRecordUserFilerecord = object
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.OperatingRecordID == foreign.ID {
				local.R.OperatingRecord = foreign
				if foreign.R == nil {
					foreign.R = &userOperatingrecordR{}
				}
				foreign.R.OperatingRecordUserFilerecord = local
				break
			}
		}
	}

	return nil
}

// SetOperatingRecordG of the userFilerecord to the related item.
// Sets o.R.OperatingRecord to related.
// Adds o to related.R.OperatingRecordUserFilerecord.
// Uses the global database handle.
func (o *UserFilerecord) SetOperatingRecordG(insert bool, related *UserOperatingrecord) error {
	return o.SetOperatingRecord(boil.GetDB(), insert, related)
}

// SetOperatingRecordP of the userFilerecord to the related item.
// Sets o.R.OperatingRecord to related.
// Adds o to related.R.OperatingRecordUserFilerecord.
// Panics on error.
func (o *UserFilerecord) SetOperatingRecordP(exec boil.Executor, insert bool, related *UserOperatingrecord) {
	if err := o.SetOperatingRecord(exec, insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetOperatingRecordGP of the userFilerecord to the related item.
// Sets o.R.OperatingRecord to related.
// Adds o to related.R.OperatingRecordUserFilerecord.
// Uses the global database handle and panics on error.
func (o *UserFilerecord) SetOperatingRecordGP(insert bool, related *UserOperatingrecord) {
	if err := o.SetOperatingRecord(boil.GetDB(), insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetOperatingRecord of the userFilerecord to the related item.
// Sets o.R.OperatingRecord to related.
// Adds o to related.R.OperatingRecordUserFilerecord.
func (o *UserFilerecord) SetOperatingRecord(exec boil.Executor, insert bool, related *UserOperatingrecord) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `user_filerecord` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"operating_record_id"}),
		strmangle.WhereClause("`", "`", 0, userFilerecordPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.OperatingRecordID = related.ID
	if o.R == nil {
		o.R = &userFilerecordR{
			OperatingRecord: related,
		}
	} else {
		o.R.OperatingRecord = related
	}

	if related.R == nil {
		related.R = &userOperatingrecordR{
			OperatingRecordUserFilerecord: o,
		}
	} else {
		related.R.OperatingRecordUserFilerecord = o
	}

	return nil
}

// UserFilerecords retrieves all the records using an executor.
func UserFilerecords(mods ...qm.QueryMod) userFilerecordQuery {
	mods = append(mods, qm.From("`user_filerecord`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`user_filerecord`.*"})
	}

	return userFilerecordQuery{q}
}

// FindUserFilerecordG retrieves a single record by ID.
func FindUserFilerecordG(iD int64, selectCols ...string) (*UserFilerecord, error) {
	return FindUserFilerecord(boil.GetDB(), iD, selectCols...)
}

// FindUserFilerecordP retrieves a single record by ID with an executor, and panics on error.
func FindUserFilerecordP(exec boil.Executor, iD int64, selectCols ...string) *UserFilerecord {
	retobj, err := FindUserFilerecord(exec, iD, selectCols...)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return retobj
}

// FindUserFilerecordGP retrieves a single record by ID, and panics on error.
func FindUserFilerecordGP(iD int64, selectCols ...string) *UserFilerecord {
	retobj, err := FindUserFilerecord(boil.GetDB(), iD, selectCols...)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return retobj
}

// FindUserFilerecord retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindUserFilerecord(exec boil.Executor, iD int64, selectCols ...string) (*UserFilerecord, error) {
	userFilerecordObj := &UserFilerecord{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `user_filerecord` where `id`=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(nil, exec, userFilerecordObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from user_filerecord")
	}

	if err = userFilerecordObj.doAfterSelectHooks(exec); err != nil {
		return userFilerecordObj, err
	}

	return userFilerecordObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *UserFilerecord) InsertG(columns boil.Columns) error {
	return o.Insert(boil.GetDB(), columns)
}

// InsertP a single record using an executor, and panics on error. See Insert
// for whitelist behavior description.
func (o *UserFilerecord) InsertP(exec boil.Executor, columns boil.Columns) {
	if err := o.Insert(exec, columns); err != nil {
		panic(boil.WrapErr(err))
	}
}

// InsertGP a single record, and panics on error. See Insert for whitelist
// behavior description.
func (o *UserFilerecord) InsertGP(columns boil.Columns) {
	if err := o.Insert(boil.GetDB(), columns); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *UserFilerecord) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no user_filerecord provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(userFilerecordColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	userFilerecordInsertCacheMut.RLock()
	cache, cached := userFilerecordInsertCache[key]
	userFilerecordInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			userFilerecordAllColumns,
			userFilerecordColumnsWithDefault,
			userFilerecordColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(userFilerecordType, userFilerecordMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(userFilerecordType, userFilerecordMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `user_filerecord` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `user_filerecord` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `user_filerecord` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, userFilerecordPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	result, err := exec.Exec(cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into user_filerecord")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = int64(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == userFilerecordMapping["id"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, identifierCols...)
	}
	err = exec.QueryRow(cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for user_filerecord")
	}

CacheNoHooks:
	if !cached {
		userFilerecordInsertCacheMut.Lock()
		userFilerecordInsertCache[key] = cache
		userFilerecordInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// UpdateG a single UserFilerecord record using the global executor.
// See Update for more documentation.
func (o *UserFilerecord) UpdateG(columns boil.Columns) (int64, error) {
	return o.Update(boil.GetDB(), columns)
}

// UpdateP uses an executor to update the UserFilerecord, and panics on error.
// See Update for more documentation.
func (o *UserFilerecord) UpdateP(exec boil.Executor, columns boil.Columns) int64 {
	rowsAff, err := o.Update(exec, columns)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return rowsAff
}

// UpdateGP a single UserFilerecord record using the global executor. Panics on error.
// See Update for more documentation.
func (o *UserFilerecord) UpdateGP(columns boil.Columns) int64 {
	rowsAff, err := o.Update(boil.GetDB(), columns)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return rowsAff
}

// Update uses an executor to update the UserFilerecord.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *UserFilerecord) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	userFilerecordUpdateCacheMut.RLock()
	cache, cached := userFilerecordUpdateCache[key]
	userFilerecordUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			userFilerecordAllColumns,
			userFilerecordPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update user_filerecord, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `user_filerecord` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, userFilerecordPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(userFilerecordType, userFilerecordMapping, append(wl, userFilerecordPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update user_filerecord row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for user_filerecord")
	}

	if !cached {
		userFilerecordUpdateCacheMut.Lock()
		userFilerecordUpdateCache[key] = cache
		userFilerecordUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(exec)
}

// UpdateAllP updates all rows with matching column names, and panics on error.
func (q userFilerecordQuery) UpdateAllP(exec boil.Executor, cols M) int64 {
	rowsAff, err := q.UpdateAll(exec, cols)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return rowsAff
}

// UpdateAllG updates all rows with the specified column values.
func (q userFilerecordQuery) UpdateAllG(cols M) (int64, error) {
	return q.UpdateAll(boil.GetDB(), cols)
}

// UpdateAllGP updates all rows with the specified column values, and panics on error.
func (q userFilerecordQuery) UpdateAllGP(cols M) int64 {
	rowsAff, err := q.UpdateAll(boil.GetDB(), cols)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return rowsAff
}

// UpdateAll updates all rows with the specified column values.
func (q userFilerecordQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for user_filerecord")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for user_filerecord")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o UserFilerecordSlice) UpdateAllG(cols M) (int64, error) {
	return o.UpdateAll(boil.GetDB(), cols)
}

// UpdateAllGP updates all rows with the specified column values, and panics on error.
func (o UserFilerecordSlice) UpdateAllGP(cols M) int64 {
	rowsAff, err := o.UpdateAll(boil.GetDB(), cols)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return rowsAff
}

// UpdateAllP updates all rows with the specified column values, and panics on error.
func (o UserFilerecordSlice) UpdateAllP(exec boil.Executor, cols M) int64 {
	rowsAff, err := o.UpdateAll(exec, cols)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return rowsAff
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o UserFilerecordSlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), userFilerecordPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `user_filerecord` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, userFilerecordPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in userFilerecord slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all userFilerecord")
	}
	return rowsAff, nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *UserFilerecord) UpsertG(updateColumns, insertColumns boil.Columns) error {
	return o.Upsert(boil.GetDB(), updateColumns, insertColumns)
}

// UpsertGP attempts an insert, and does an update or ignore on conflict. Panics on error.
func (o *UserFilerecord) UpsertGP(updateColumns, insertColumns boil.Columns) {
	if err := o.Upsert(boil.GetDB(), updateColumns, insertColumns); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpsertP attempts an insert using an executor, and does an update or ignore on conflict.
// UpsertP panics on error.
func (o *UserFilerecord) UpsertP(exec boil.Executor, updateColumns, insertColumns boil.Columns) {
	if err := o.Upsert(exec, updateColumns, insertColumns); err != nil {
		panic(boil.WrapErr(err))
	}
}

var mySQLUserFilerecordUniqueColumns = []string{
	"id",
	"operating_record_id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *UserFilerecord) Upsert(exec boil.Executor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no user_filerecord provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(userFilerecordColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLUserFilerecordUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	userFilerecordUpsertCacheMut.RLock()
	cache, cached := userFilerecordUpsertCache[key]
	userFilerecordUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			userFilerecordAllColumns,
			userFilerecordColumnsWithDefault,
			userFilerecordColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			userFilerecordAllColumns,
			userFilerecordPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert user_filerecord, could not build update column list")
		}

		ret := strmangle.SetComplement(userFilerecordAllColumns, strmangle.SetIntersect(insert, update))

		cache.query = buildUpsertQueryMySQL(dialect, "`user_filerecord`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `user_filerecord` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(userFilerecordType, userFilerecordMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(userFilerecordType, userFilerecordMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	result, err := exec.Exec(cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for user_filerecord")
	}

	var lastID int64
	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = int64(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == userFilerecordMapping["id"] {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(userFilerecordType, userFilerecordMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for user_filerecord")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, nzUniqueCols...)
	}
	err = exec.QueryRow(cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for user_filerecord")
	}

CacheNoHooks:
	if !cached {
		userFilerecordUpsertCacheMut.Lock()
		userFilerecordUpsertCache[key] = cache
		userFilerecordUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// DeleteG deletes a single UserFilerecord record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *UserFilerecord) DeleteG() (int64, error) {
	return o.Delete(boil.GetDB())
}

// DeleteP deletes a single UserFilerecord record with an executor.
// DeleteP will match against the primary key column to find the record to delete.
// Panics on error.
func (o *UserFilerecord) DeleteP(exec boil.Executor) int64 {
	rowsAff, err := o.Delete(exec)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return rowsAff
}

// DeleteGP deletes a single UserFilerecord record.
// DeleteGP will match against the primary key column to find the record to delete.
// Panics on error.
func (o *UserFilerecord) DeleteGP() int64 {
	rowsAff, err := o.Delete(boil.GetDB())
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return rowsAff
}

// Delete deletes a single UserFilerecord record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *UserFilerecord) Delete(exec boil.Executor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no UserFilerecord provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), userFilerecordPrimaryKeyMapping)
	sql := "DELETE FROM `user_filerecord` WHERE `id`=?"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from user_filerecord")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for user_filerecord")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

func (q userFilerecordQuery) DeleteAllG() (int64, error) {
	return q.DeleteAll(boil.GetDB())
}

// DeleteAllP deletes all rows, and panics on error.
func (q userFilerecordQuery) DeleteAllP(exec boil.Executor) int64 {
	rowsAff, err := q.DeleteAll(exec)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return rowsAff
}

// DeleteAllGP deletes all rows, and panics on error.
func (q userFilerecordQuery) DeleteAllGP() int64 {
	rowsAff, err := q.DeleteAll(boil.GetDB())
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return rowsAff
}

// DeleteAll deletes all matching rows.
func (q userFilerecordQuery) DeleteAll(exec boil.Executor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no userFilerecordQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from user_filerecord")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for user_filerecord")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o UserFilerecordSlice) DeleteAllG() (int64, error) {
	return o.DeleteAll(boil.GetDB())
}

// DeleteAllP deletes all rows in the slice, using an executor, and panics on error.
func (o UserFilerecordSlice) DeleteAllP(exec boil.Executor) int64 {
	rowsAff, err := o.DeleteAll(exec)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return rowsAff
}

// DeleteAllGP deletes all rows in the slice, and panics on error.
func (o UserFilerecordSlice) DeleteAllGP() int64 {
	rowsAff, err := o.DeleteAll(boil.GetDB())
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return rowsAff
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o UserFilerecordSlice) DeleteAll(exec boil.Executor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(userFilerecordBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), userFilerecordPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `user_filerecord` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, userFilerecordPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from userFilerecord slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for user_filerecord")
	}

	if len(userFilerecordAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *UserFilerecord) ReloadG() error {
	if o == nil {
		return errors.New("models: no UserFilerecord provided for reload")
	}

	return o.Reload(boil.GetDB())
}

// ReloadP refetches the object from the database with an executor. Panics on error.
func (o *UserFilerecord) ReloadP(exec boil.Executor) {
	if err := o.Reload(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadGP refetches the object from the database and panics on error.
func (o *UserFilerecord) ReloadGP() {
	if err := o.Reload(boil.GetDB()); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *UserFilerecord) Reload(exec boil.Executor) error {
	ret, err := FindUserFilerecord(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *UserFilerecordSlice) ReloadAllG() error {
	if o == nil {
		return errors.New("models: empty UserFilerecordSlice provided for reload all")
	}

	return o.ReloadAll(boil.GetDB())
}

// ReloadAllP refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
// Panics on error.
func (o *UserFilerecordSlice) ReloadAllP(exec boil.Executor) {
	if err := o.ReloadAll(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadAllGP refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
// Panics on error.
func (o *UserFilerecordSlice) ReloadAllGP() {
	if err := o.ReloadAll(boil.GetDB()); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *UserFilerecordSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := UserFilerecordSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), userFilerecordPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `user_filerecord`.* FROM `user_filerecord` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, userFilerecordPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in UserFilerecordSlice")
	}

	*o = slice

	return nil
}

// UserFilerecordExistsG checks if the UserFilerecord row exists.
func UserFilerecordExistsG(iD int64) (bool, error) {
	return UserFilerecordExists(boil.GetDB(), iD)
}

// UserFilerecordExistsP checks if the UserFilerecord row exists. Panics on error.
func UserFilerecordExistsP(exec boil.Executor, iD int64) bool {
	e, err := UserFilerecordExists(exec, iD)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// UserFilerecordExistsGP checks if the UserFilerecord row exists. Panics on error.
func UserFilerecordExistsGP(iD int64) bool {
	e, err := UserFilerecordExists(boil.GetDB(), iD)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// UserFilerecordExists checks if the UserFilerecord row exists.
func UserFilerecordExists(exec boil.Executor, iD int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `user_filerecord` where `id`=? limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}
	row := exec.QueryRow(sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if user_filerecord exists")
	}

	return exists, nil
}

// Exists checks if the UserFilerecord row exists.
func (o *UserFilerecord) Exists(exec boil.Executor) (bool, error) {
	return UserFilerecordExists(exec, o.ID)
}
